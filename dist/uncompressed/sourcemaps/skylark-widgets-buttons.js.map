{"version":3,"sources":["skylark-widgets-buttons.js"],"names":[],"mappingsfile":"../skylark-widgets-buttons.js","sourcesContent":["define('skylark-widgets-buttons/buttons',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark) {\r\n\r\n\r\n\treturn skylark.attach(\"widgets.buttons\",{});\r\n\r\n});\r\n\r\n\ndefine('skylark-widgets-buttons/Button',[\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./buttons\"\t\r\n],function(Widget,buttons){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Base button class.\r\n\t * \r\n\t * @class Button\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar Button = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tthis._elm.style.cursor = \"pointer\";\r\n\r\n\t\t\tthis.preventDragEvents();\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set button color.\r\n\t\t * \r\n\t\t * When mouse is over the button uses the overColor, when the mouse gets outside of the button it uses the base color.\r\n\t\t * \r\n\t\t * @method setColor\r\n\t\t * @param {String} baseColor CSS color for the button background.\r\n\t\t * @param {String} overColor CSS color for the button when mouse is over it.\r\n\t\t */\r\n\t\tsetColor : function(baseColor, overColor){\r\n\t\t\tthis._elm.style.backgroundColor = baseColor;\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\t{\r\n\t\t\t\tthis.style.backgroundColor = overColor;\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function()\t{\r\n\t\t\t\tthis.style.backgroundColor = baseColor;\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set button styles, the style can be descriped in a object.\r\n\t\t *\r\n\t\t * Here is an exaple of a style object:\r\n\t\t * {\r\n\t\t * backgroundColor: \"#FF0000\",\r\n\t\t * color: \"#FFFFFF\"\r\n\t\t * }\r\n\t\t *\r\n\t\t * @method setColor\r\n\t\t * @param {Object} baseStyle Object with the style to be applied as base.\r\n\t\t * @param {Object} overStyle Object with the style to be applied when mouse is over.\r\n\t\t */\r\n\t\tsetStyles : function(baseStyle, overStyle)\t{\r\n\t\t\tfor(var i in baseStyle)\r\n\t\t\t{\r\n\t\t\t\tthis._elm.style[i] = baseStyle[i];\r\n\t\t\t}\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\t{\r\n\t\t\t\tfor(var i in overStyle)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.style[i] = overStyle[i];\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function()\t{\r\n\t\t\t\tfor(var i in baseStyle)\t{\r\n\t\t\t\t\tthis.style[i] = baseStyle[i];\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\treturn buttons.Button = Button;\r\n});\ndefine('skylark-widgets-base/mixins/ImageMixin',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"../Widget\"\r\n],function(\r\n\tVector2,\r\n\tWidget\r\n){\r\n\t\"use strict\";\r\n\r\n\tvar ImageMixin = {\r\n\t\t_buildImage : function (parent) {\r\n\t\t\t/**\r\n\t\t\t * Button icon.\r\n\t\t\t * \r\n\t\t\t * @attribute icon\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.icon = document.createElement(\"img\");\r\n\t\t\tthis.icon.style.pointerEvents = \"none\";\r\n\t\t\tthis.icon.style.position = \"absolute\";\r\n\t\t\tthis.icon.style.top = \"15%\";\r\n\t\t\tthis.icon.style.left = \"15%\";\r\n\t\t\tthis.icon.style.width = \"70%\";\r\n\t\t\tthis.icon.style.height = \"70%\";\r\n\t\t\tthis._elm.appendChild(this.icon);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set button drawer icon.\r\n\t\t *\r\n\t\t * @method setImage\r\n\t\t * @param {String} image Image URL.\r\n\t\t */\r\n\t\tsetImage : function(image) {\r\n\t\t\tthis.icon.src = image;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set icon scale, the icon will be centered.\r\n\t\t *\r\n\t\t * @method setImageScale\r\n\t\t */\r\n\t\tsetImageScale : function(x, y){\r\n\t\t\tthis.icon.style.top = ((1 - y) / 2 * 100) + \"%\";\r\n\t\t\tthis.icon.style.left = ((1 - x) / 2 * 100) + \"%\";\r\n\t\t\tthis.icon.style.width = (x * 100) + \"%\";\r\n\t\t\tthis.icon.style.height = (y * 100) + \"%\";\r\n\t\t}\r\n\r\n\t};\r\n\r\n\treturn ImageMixin;\r\n});\ndefine('skylark-widgets-buttons/ButtonImage',[\r\n\t\"skylark-widgets-base/mixins/ImageMixin\",\r\n\t\"./buttons\",\r\n\t\"./Button\"\r\n],function(ImageMixin,buttons,Button){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with a centered icon.\r\n\t *\r\n\t * @class ButtonImageToggle\r\n\t * @extends {Button}\r\n\t * @param {Element} parent Parent element.\r\n\t */\r\n\tvar ButtonImage = Button.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButton.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis._buildImage();\r\n\t\t\tthis.setColor(null, Editor.theme.buttonOverColor);\r\n\t\t},\r\n\r\n\t\t...ImageMixin\r\n\r\n\t});\r\n\r\n\treturn buttons.ButtonImage = ButtonImage;\r\n});\ndefine('skylark-widgets-buttons/ButtonDrawer',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"skylark-widgets-base/panels/Panel\",\r\n\t\"./buttons\",\r\n\t\"./ButtonImage\"\r\n],function(\r\n\tVector2,\r\n\tPanel,\r\n\tbuttons,\r\n\tButtonImage\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with text, inherits all methods available on the Text class.\r\n\t * \r\n\t * Used in menu bars, panels, etc.\r\n\t *\r\n\t * @class ButtonDrawer\r\n\t * @extends {ButtonImage}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar ButtonDrawer = ButtonImage.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonImage.prototype._construct.call(this, parent);\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.zIndex = \"200\";\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.buttonColor;\r\n\t\t\tthis._elm.style.overflow = \"visible\";\r\n\r\n\t\t\tthis.panel = new Panel(this);\r\n\t\t\tthis.panel.element.style.position = \"absolute\";\r\n\t\t\tthis.panel.element.style.overflow = \"visible\";\r\n\t\t\t//this.panel.element.style.backgroundColor = Editor.theme.barColor;\r\n\t\t\tthis.panel.element.style.backgroundColor = skin.barColor;\r\n\t\t\tthis.panel.element.style.zIndex = \"250\";\r\n\r\n\t\t\t/** \r\n\t\t\t * List of the items in this panel.\r\n\t\t\t *\r\n\t\t\t * @attribute items\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.items = [];\r\n\r\n\t\t\t/**\r\n\t\t\t * Number of maximum items per row\r\n\t\t\t *\r\n\t\t\t * @attribute itemsPerLine\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.itemsPerLine = 3;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Size of each option, also affects the size of the panel.\r\n\t\t\t *\r\n\t\t\t * @attribute itemsSize\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.itemsSize = new Vector2(40, 40);\r\n\r\n\t\t\t/**\r\n\t\t\t * Scale of the inner icon of the items created from the addItem() method.\r\n\t\t\t *\r\n\t\t\t * @attribute itemsScale\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.itemsScale = new Vector2(0.7, 0.7);\r\n\r\n\t\t\t/**\r\n\t\t\t * Indicates if the button drawer panel is visible.\r\n\t\t\t *\r\n\t\t\t * @attribute expanded\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.expanded = false;\r\n\t\t\tthis.setExpanded(false);\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonOverColor;\r\n\t\t\t\tself.element.style.backgroundColor = skin.buttonOverColor;\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis._elm.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\t\tself.element.style.backgroundColor = skin.buttonColor;\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\r\n\t\t\tthis.panel.element.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis.panel.element.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\t\t},\r\n\r\n\r\n\t\tclear : function(){\r\n\t\t\tfor(var i = 0; i < this.items.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.items[i].destroy();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.items = [];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Expand or close the button drawer panel.\r\n\t\t *\r\n\t\t * @method setExpanded\r\n\t\t * @param {Boolean} expanded\r\n\t\t */\r\n\t\tsetExpanded : function(expanded){\r\n\t\t\tthis.expanded = expanded;\r\n\t\t\tthis.panel.element.style.display = this.expanded ? \"block\" : \"none\";\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Insert new option from already created element.\r\n\t\t *\r\n\t\t * @method insertItem\r\n\t\t * @param {Widget} Widget of the option to be inserted in the drawer\r\n\t\t */\r\n\t\tinsertItem : function(element){\r\n\t\t\telement.attachTo(this.panel);\r\n\t\t\tthis.items.push(element);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Add new option to the menu.\r\n\t\t * \r\n\t\t * @method addItem\r\n\t\t * @param {String} image\r\n\t\t * @param {Function} callback\r\n\t\t * @param {String} altText\r\n\t\t */\r\n\t\taddItem : function(image, callback, altText){\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tvar button = new ButtonImage(this.panel);\r\n\t\t\tbutton.setImage(image);\r\n\t\t\tbutton.setOnClick(function()\r\n\t\t\t{\r\n\t\t\t\tcallback();\r\n\t\t\t\tself.expanded = false;\r\n\t\t\t\tself.updateInterface();\r\n\t\t\t});\r\n\r\n\t\t\tif(altText !== undefined)\r\n\t\t\t{\r\n\t\t\t\tbutton.setAltText(altText);\r\n\t\t\t}\r\n\r\n\t\t\tthis.items.push(button);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove an option from the menu.\r\n\t\t *\r\n\t\t * @method removeItem\r\n\t\t * @param {Number} index\r\n\t\t */\r\n\t\tremoveItem : function(index) \t{\r\n\t\t\tif(index >= 0 && index < this.items.length)\r\n\t\t\t{\r\n\t\t\t\tthis.items[index].destroy();\r\n\t\t\t\tthis.items.splice(index, 1);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Updates drawer panel size based on the number of items available.\r\n\t\t * \r\n\t\t * @method updatePanelSize\r\n\t\t */\r\n\t\tupdatePanelSize : function()\t{\r\n\t\t\tvar itemsPerLine = (this.items.length < this.itemsPerLine) ? this.items.length : this.itemsPerLine;\r\n\r\n\t\t\tthis.panel.size.x = (this.itemsSize.x * itemsPerLine);\r\n\t\t\tthis.panel.size.y = (this.itemsSize.y * (Math.floor((this.items.length - 1) / itemsPerLine) + 1));\r\n\t\t\tthis.panel.updateSize();\r\n\r\n\t\t\tthis.panel.position.set(this.itemsSize.x, 0);\r\n\t\t\tthis.panel.updatePosition();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update drawer items position and size.\r\n\t\t *\r\n\t\t * Should be called after change in items displacement variables).\r\n\t\t *\r\n\t\t * @method updateItems\r\n\t\t */\r\n\t\tupdateItems : function()\t{\r\n\t\t\tthis.updatePanelSize();\r\n\r\n\t\t\tvar itemsPerLine = (this.items.length < this.itemsPerLine) ? this.items.length : this.itemsPerLine;\r\n\r\n\t\t\tfor(var i = 0; i < this.items.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.items[i].size.set(this.itemsSize.x, this.itemsSize.y);\r\n\t\t\t\tthis.items[i].position.x = this.itemsSize.x * (i % itemsPerLine);\r\n\t\t\t\tthis.items[i].position.y = this.itemsSize.y * Math.floor(i / itemsPerLine);\r\n\t\t\t\tthis.items[i].updateInterface();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateVisibility : function()\t{\r\n\t\t\tthis._elm.style.display = this.visible ? \"block\" : \"none\";\r\n\t\t},\r\n\r\n\r\n\t\toptionsSize : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this.itemsSize;\r\n\t\t\t},\r\n\r\n\t\t\tset : function(v) {\r\n\t\t\t\tthis.itemsSize = v\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\toptionsPerLine : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this.itemsPerLine;\r\n\t\t\t},\r\n\r\n\t\t\tset : function(v) {\r\n\t\t\t\tthis.itemsPerLine = v\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t\r\n\tButtonDrawer.prototype.addOption = ButtonDrawer.prototype.addItem;\r\n\tButtonDrawer.prototype.insertOption = ButtonDrawer.prototype.insertItem;\r\n\tButtonDrawer.prototype.updateOptions = ButtonDrawer.prototype.updateItems;\r\n\tButtonDrawer.prototype.removeOption = ButtonDrawer.prototype.reomveItem;\r\n\r\n\r\n\treturn buttons.ButtonDrawer = ButtonDrawer;\r\n});\ndefine('skylark-widgets-buttons/ButtonImageToggle',[\r\n\t\"./buttons\",\r\n\t\"./ButtonImage\"\r\n],function(buttons,ButtonImage){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * A image button that can be toggled.\r\n\t * \r\n\t * @class ButtonImageToggle\r\n\t * @extends {ButtonImage}\r\n\t * @param {Element} parent Parent element.\r\n\t */\r\n\tvar ButtonImageToggle = ButtonImage.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonImage.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\tvar skin = this.getSkin();\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.buttonColor;\r\n\r\n\t\t\tthis.selected = false;\r\n\r\n\t\t\t//Click event\r\n\t\t\tvar self = this;\r\n\t\t\tthis._elm.onclick = function()\r\n\t\t\t{\r\n\t\t\t\tself.selected = !self.selected;\r\n\t\t\t};\r\n\r\n\t\t\t//Mouse over and mouse out events\r\n\t\t\tthis._elm.onmouseenter = function() {\r\n\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonOverColor;\r\n\t\t\t\tself.element.style.backgroundColor = skin.buttonOverColor;\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function() {\r\n\t\t\t\tif(!self.selected) {\r\n\t\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\t\t\tself.element.style.backgroundColor = skin.buttonColor;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set the seleted state of the toggle button.\r\n\t\t * \r\n\t\t * @method setSelected\r\n\t\t * @param {Boolean} selected\r\n\t\t */\r\n\t\tsetSelected : function(selected) {\r\n\t\t\tthis.selected = selected;\r\n\t\t\tvar skin = this.getSkin();\r\n\t\t\t//this._elm.style.backgroundColor = this.selected ? Editor.theme.buttonOverColor : Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.backgroundColor = this.selected ? skin.buttonOverColor : skin.buttonColor;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set button callback function.\r\n\t\t *\r\n\t\t * @method setOnClick\r\n\t\t */\r\n\t\tsetOnClick : function(callback) {\r\n\t\t\tvar self = this;\r\n\t\t\tthis._elm.onclick = function() \t{\r\n\t\t\t\tself.selected = !self.selected;\r\n\t\t\t\tcallback();\t\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\treturn buttons.ButtonImageToggle = ButtonImageToggle;\r\n});\ndefine('skylark-widgets-buttons/ButtonText',[\r\n\t\"skylark-widgets-base/mixins/TextMixin\",\r\n\t\"./buttons\",\r\n\t\"./Button\",\r\n],function(TextMixin,buttons,Button){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with text, inherits all methods available on the Text class.\r\n\t * \r\n\t * Used in menu bars, panels, etc.\r\n\t *\r\n\t * @class ButtonText\r\n\t * @extends {Button, Text}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\tvar ButtonText = Button.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButton.prototype._construct.call(this, parent);\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t//Span\r\n\t\t\tthis.span = document.createElement(\"span\");\r\n\t\t\tthis.span.style.overflow = \"hidden\";\r\n\t\t\tthis._elm.appendChild(this.span);\r\n\r\n\t\t\t//Text\r\n\t\t\tthis.text = document.createTextNode(\"\");\r\n\t\t\tthis.span.appendChild(this.text);\r\n\r\n\r\n\t\t\t//this.setColor(Editor.theme.buttonColor, Editor.theme.buttonOverColor);\r\n\t\t\tthis.setColor(skin.buttonColor, skin.buttonOverColor);\r\n\t\t\tthis.allowWordBreak(false);\r\n\t\t\tthis.setVerticalAlignment(TextMixin.CENTER);\r\n\t\t\tthis.setAlignment(TextMixin.CENTER);\r\n\t\t\t*/\r\n\r\n\t\t\tthis._buildText();\r\n\r\n\t\t\t//this.setColor(Editor.theme.buttonColor, Editor.theme.buttonOverColor);\r\n\t\t\tthis.setColor(skin.buttonColor, skin.buttonOverColor);\r\n\r\n\t\t},\r\n\t\t...TextMixin\r\n\t});\r\n\t\r\n\r\n\treturn buttons.ButtonText = ButtonText;\r\n});\r\n\ndefine('skylark-widgets-buttons/main',[\r\n\t\"./buttons\",\r\n\t\"./Button\",\r\n\t\"./ButtonDrawer\",\r\n\t\"./ButtonImage\",\r\n\t\"./ButtonImageToggle\",\r\n\t\"./ButtonText\"\r\n],function(buttons){\r\n\treturn buttons;\r\n});\ndefine('skylark-widgets-buttons', ['skylark-widgets-buttons/main'], function (main) { return main; });\n\n"]}