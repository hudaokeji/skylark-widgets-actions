{"version":3,"sources":["skylark-widgets-actions.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../skylark-widgets-actions.js","sourcesContent":["define('skylark-widgets-actions/actions',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark) {\r\n\tvar actions = {\r\n\t\tbuttons : {},\r\n\t\tmenus : {}\r\n\t};\r\n\r\n\treturn skylark.attach(\"widgets.actions\",actions);\r\n\r\n});\r\n\r\n\ndefine('skylark-widgets-actions/buttons/Button',[\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"../actions\"\t\r\n],function(Widget,actions){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Base button class.\r\n\t * \r\n\t * @class Button\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar Button = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tthis._elm.style.cursor = \"pointer\";\r\n\r\n\t\t\tthis.preventDragEvents();\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set button color.\r\n\t\t * \r\n\t\t * When mouse is over the button uses the overColor, when the mouse gets outside of the button it uses the base color.\r\n\t\t * \r\n\t\t * @method setColor\r\n\t\t * @param {String} baseColor CSS color for the button background.\r\n\t\t * @param {String} overColor CSS color for the button when mouse is over it.\r\n\t\t */\r\n\t\tsetColor : function(baseColor, overColor){\r\n\t\t\tthis._elm.style.backgroundColor = baseColor;\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\t{\r\n\t\t\t\tthis.style.backgroundColor = overColor;\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function()\t{\r\n\t\t\t\tthis.style.backgroundColor = baseColor;\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set button styles, the style can be descriped in a object.\r\n\t\t *\r\n\t\t * Here is an exaple of a style object:\r\n\t\t * {\r\n\t\t * backgroundColor: \"#FF0000\",\r\n\t\t * color: \"#FFFFFF\"\r\n\t\t * }\r\n\t\t *\r\n\t\t * @method setColor\r\n\t\t * @param {Object} baseStyle Object with the style to be applied as base.\r\n\t\t * @param {Object} overStyle Object with the style to be applied when mouse is over.\r\n\t\t */\r\n\t\tsetStyles : function(baseStyle, overStyle)\t{\r\n\t\t\tfor(var i in baseStyle)\r\n\t\t\t{\r\n\t\t\t\tthis._elm.style[i] = baseStyle[i];\r\n\t\t\t}\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\t{\r\n\t\t\t\tfor(var i in overStyle)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.style[i] = overStyle[i];\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function()\t{\r\n\t\t\t\tfor(var i in baseStyle)\t{\r\n\t\t\t\t\tthis.style[i] = baseStyle[i];\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\treturn actions.buttons.Button = Button;\r\n});\ndefine('skylark-widgets-base/mixins/ImageMixin',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"../Widget\"\r\n],function(\r\n\tVector2,\r\n\tWidget\r\n){\r\n\t\"use strict\";\r\n\r\n\tvar ImageMixin = {\r\n\t\t_buildImage : function (parent) {\r\n\t\t\t/**\r\n\t\t\t * Button icon.\r\n\t\t\t * \r\n\t\t\t * @attribute icon\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.icon = document.createElement(\"img\");\r\n\t\t\tthis.icon.style.pointerEvents = \"none\";\r\n\t\t\tthis.icon.style.position = \"absolute\";\r\n\t\t\tthis.icon.style.top = \"15%\";\r\n\t\t\tthis.icon.style.left = \"15%\";\r\n\t\t\tthis.icon.style.width = \"70%\";\r\n\t\t\tthis.icon.style.height = \"70%\";\r\n\t\t\tthis._elm.appendChild(this.icon);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set button drawer icon.\r\n\t\t *\r\n\t\t * @method setImage\r\n\t\t * @param {String} image Image URL.\r\n\t\t */\r\n\t\tsetImage : function(image) {\r\n\t\t\tthis.icon.src = image;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set icon scale, the icon will be centered.\r\n\t\t *\r\n\t\t * @method setImageScale\r\n\t\t */\r\n\t\tsetImageScale : function(x, y){\r\n\t\t\tthis.icon.style.top = ((1 - y) / 2 * 100) + \"%\";\r\n\t\t\tthis.icon.style.left = ((1 - x) / 2 * 100) + \"%\";\r\n\t\t\tthis.icon.style.width = (x * 100) + \"%\";\r\n\t\t\tthis.icon.style.height = (y * 100) + \"%\";\r\n\t\t}\r\n\r\n\t};\r\n\r\n\treturn ImageMixin;\r\n});\ndefine('skylark-widgets-actions/buttons/ButtonImage',[\r\n\t\"skylark-widgets-base/mixins/ImageMixin\",\r\n\t\"../actions\",\r\n\t\"./Button\"\r\n],function(ImageMixin,actions,Button){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with a centered icon.\r\n\t *\r\n\t * @class ButtonImageToggle\r\n\t * @extends {Button}\r\n\t * @param {Element} parent Parent element.\r\n\t */\r\n\tvar ButtonImage = Button.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButton.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis._buildImage();\r\n\t\t\tthis.setColor(null, Editor.theme.buttonOverColor);\r\n\t\t},\r\n\r\n\t\t...ImageMixin\r\n\r\n\t});\r\n\r\n\treturn actions.buttons.ButtonImage = ButtonImage;\r\n});\ndefine('skylark-widgets-actions/buttons/ButtonDrawer',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./ButtonImage\"\r\n],function(\r\n\tVector2,\r\n\tElement,\r\n\tButtonImage\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with text, inherits all methods available on the Text class.\r\n\t * \r\n\t * Used in menu bars, panels, etc.\r\n\t *\r\n\t * @class ButtonDrawer\r\n\t * @extends {ButtonImage}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar ButtonDrawer = ButtonImage.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonImage.prototype._construct.call(this, parent);\r\n\r\n\r\n\t\t\tthis._elm.style.zIndex = \"200\";\r\n\t\t\tthis._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.overflow = \"visible\";\r\n\r\n\t\t\tthis.panel = new Widget(this, \"div\");\r\n\t\t\tthis.panel.element.style.overflow = \"visible\";\r\n\t\t\tthis.panel.element.style.backgroundColor = Editor.theme.barColor;\r\n\t\t\tthis.panel.element.style.zIndex = \"250\";\r\n\r\n\t\t\t/** \r\n\t\t\t * List of the options in this panel.\r\n\t\t\t *\r\n\t\t\t * @attribute options\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.options = [];\r\n\r\n\t\t\t/**\r\n\t\t\t * Number of maximum options per row\r\n\t\t\t *\r\n\t\t\t * @attribute optionsPerLine\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.optionsPerLine = 3;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Size of each option, also affects the size of the panel.\r\n\t\t\t *\r\n\t\t\t * @attribute optionsSize\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.optionsSize = new Vector2(40, 40);\r\n\r\n\t\t\t/**\r\n\t\t\t * Scale of the inner icon of the options created from the addOption() method.\r\n\t\t\t *\r\n\t\t\t * @attribute optionsScale\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.optionsScale = new Vector2(0.7, 0.7);\r\n\r\n\t\t\t/**\r\n\t\t\t * Indicates if the button drawer panel is visible.\r\n\t\t\t *\r\n\t\t\t * @attribute expanded\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.expanded = false;\r\n\t\t\tthis.setExpanded(false);\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\tself.element.style.backgroundColor = Editor.theme.buttonOverColor;\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis._elm.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\tself.element.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\r\n\t\t\tthis.panel.element.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis.panel.element.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\t\t},\r\n\r\n\r\n\t\tclear : function(){\r\n\t\t\tfor(var i = 0; i < this.options.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.options[i].destroy();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.options = [];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Expand or close the button drawer panel.\r\n\t\t *\r\n\t\t * @method setExpanded\r\n\t\t * @param {Boolean} expanded\r\n\t\t */\r\n\t\tsetExpanded : function(expanded){\r\n\t\t\tthis.expanded = expanded;\r\n\t\t\tthis.panel.element.style.display = this.expanded ? \"block\" : \"none\";\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Insert new option from already created element.\r\n\t\t *\r\n\t\t * @method insertOption\r\n\t\t * @param {Widget} Widget of the option to be inserted in the drawer\r\n\t\t */\r\n\t\tinsertOption : function(element){\r\n\t\t\telement.attachTo(this.panel);\r\n\t\t\tthis.options.push(element);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Add new option to the menu.\r\n\t\t * \r\n\t\t * @method addOption\r\n\t\t * @param {String} image\r\n\t\t * @param {Function} callback\r\n\t\t * @param {String} altText\r\n\t\t */\r\n\t\taddOption : function(image, callback, altText){\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tvar button = new ButtonImage(this.panel);\r\n\t\t\tbutton.setImage(image);\r\n\t\t\tbutton.setOnClick(function()\r\n\t\t\t{\r\n\t\t\t\tcallback();\r\n\t\t\t\tself.expanded = false;\r\n\t\t\t\tself.updateInterface();\r\n\t\t\t});\r\n\r\n\t\t\tif(altText !== undefined)\r\n\t\t\t{\r\n\t\t\t\tbutton.setAltText(altText);\r\n\t\t\t}\r\n\r\n\t\t\tthis.options.push(button);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove an option from the menu.\r\n\t\t *\r\n\t\t * @method removeOption\r\n\t\t * @param {Number} index\r\n\t\t */\r\n\t\tremoveOption : function(index) \t{\r\n\t\t\tif(index >= 0 && index < this.options.length)\r\n\t\t\t{\r\n\t\t\t\tthis.options[index].destroy();\r\n\t\t\t\tthis.options.splice(index, 1);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Updates drawer panel size based on the number of options available.\r\n\t\t * \r\n\t\t * @method updatePanelSize\r\n\t\t */\r\n\t\t_updatePanelSize : function()\t{\r\n\t\t\tvar optionsPerLine = (this.options.length < this.optionsPerLine) ? this.options.length : this.optionsPerLine;\r\n\r\n\t\t\tthis.panel.size.x = (this.optionsSize.x * optionsPerLine);\r\n\t\t\tthis.panel.size.y = (this.optionsSize.y * (Math.floor((this.options.length - 1) / optionsPerLine) + 1));\r\n\t\t\tthis.panel.updateSize();\r\n\r\n\t\t\tthis.panel.position.set(this.optionsSize.x, 0);\r\n\t\t\tthis.panel.updatePosition();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update drawer options position and size.\r\n\t\t *\r\n\t\t * Should be called after change in options displacement variables).\r\n\t\t *\r\n\t\t * @method updateOptions\r\n\t\t */\r\n\t\t_updateOptions : function()\t{\r\n\t\t\tthis.updatePanelSize();\r\n\r\n\t\t\tvar optionsPerLine = (this.options.length < this.optionsPerLine) ? this.options.length : this.optionsPerLine;\r\n\r\n\t\t\tfor(var i = 0; i < this.options.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.options[i].size.set(this.optionsSize.x, this.optionsSize.y);\r\n\t\t\t\tthis.options[i].position.x = this.optionsSize.x * (i % optionsPerLine);\r\n\t\t\t\tthis.options[i].position.y = this.optionsSize.y * Math.floor(i / optionsPerLine);\r\n\t\t\t\tthis.options[i].updateInterface();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_updateVisibility : function()\t{\r\n\t\t\tthis._elm.style.display = this.visible ? \"block\" : \"none\";\r\n\t\t}\r\n\t});\r\n\r\n\r\n\treturn actions.buttons.ButtonDrawer = ButtonDrawer;\r\n});\ndefine('skylark-widgets-actions/buttons/ButtonImageToggle',[\r\n\t\"../actions\",\r\n\t\"./ButtonImage\"\r\n],function(actions,ButtonImage){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * A image button that can be toggled.\r\n\t * \r\n\t * @class ButtonImageToggle\r\n\t * @extends {ButtonImage}\r\n\t * @param {Element} parent Parent element.\r\n\t */\r\n\tvar ButtonImageToggle = ButtonImage.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonImage.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\tvar skin = this.getSkin();\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.buttonColor;\r\n\r\n\t\t\tthis.selected = false;\r\n\r\n\t\t\t//Click event\r\n\t\t\tvar self = this;\r\n\t\t\tthis._elm.onclick = function()\r\n\t\t\t{\r\n\t\t\t\tself.selected = !self.selected;\r\n\t\t\t};\r\n\r\n\t\t\t//Mouse over and mouse out events\r\n\t\t\tthis._elm.onmouseenter = function() {\r\n\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonOverColor;\r\n\t\t\t\tself.element.style.backgroundColor = skin.buttonOverColor;\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function() {\r\n\t\t\t\tif(!self.selected) {\r\n\t\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\t\t\tself.element.style.backgroundColor = skin.buttonColor;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set the seleted state of the toggle button.\r\n\t\t * \r\n\t\t * @method setSelected\r\n\t\t * @param {Boolean} selected\r\n\t\t */\r\n\t\tsetSelected : function(selected) {\r\n\t\t\tthis.selected = selected;\r\n\t\t\tvar skin = this.getSkin();\r\n\t\t\t//this._elm.style.backgroundColor = this.selected ? Editor.theme.buttonOverColor : Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.backgroundColor = this.selected ? skin.buttonOverColor : skin.buttonColor;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set button callback function.\r\n\t\t *\r\n\t\t * @method setOnClick\r\n\t\t */\r\n\t\tsetOnClick : function(callback) {\r\n\t\t\tvar self = this;\r\n\t\t\tthis._elm.onclick = function() \t{\r\n\t\t\t\tself.selected = !self.selected;\r\n\t\t\t\tcallback();\t\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\treturn actions.buttons.ButtonImageToggle = ButtonImageToggle;\r\n});\ndefine('skylark-widgets-base/mixins/TextMixin',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"../Widget\"\r\n],function(\r\n\tVector2,\r\n\tWidget\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text element without background.\r\n\t * \r\n\t * @class Text\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\r\n\tvar TextMixin = {\r\n\t\t_buildText : function() {\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.pointerEvents = \"none\";\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\r\n\t\t\t/** \r\n\t\t\t * Span DOM element used to represent the text.\r\n\t\t\t *\r\n\t\t\t * @attribute span\r\n\t\t\t * @type {DOM}\r\n\t\t \t */\r\n\t\t\tthis.span = document.createElement(\"span\");\r\n\t\t\tthis.span.style.overflow = \"hidden\";\r\n\t\t\tthis._elm.appendChild(this.span);\r\n\r\n\t\t\t//Text\r\n\t\t\tthis.text = document.createTextNode(\"\");\r\n\t\t\tthis.span.appendChild(this.text);\r\n\r\n\t\t\t/**\r\n\t\t\t * If set to true the text container will automatically fit the text size.\r\n\t\t\t *\r\n\t\t\t * @attribute fitContent\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.fitContent = false;\r\n\r\n\t\t\tthis.allowWordBreak(false);\r\n\t\t\tthis.setVerticalAlignment(TextMixin.CENTER);\r\n\t\t\tthis.setAlignment(TextMixin.CENTER);\t\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set font to use for the text.\r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {String} fontFamily Font family.\r\n\t\t * @param {Number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {String} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle) {\r\n\t\t\tthis.span.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis.span.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined) {\r\n\t\t\t\tthis.span.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Enable of disable word breaking.\r\n\t\t *\r\n\t\t * @method allowWordBreak\r\n\t\t * @param {Boolean} line If true words can be breaked.\r\n\t\t */\r\n\t\tallowWordBreak : function(value) {\r\n\t\t\tif(value === true) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"normal\";\r\n\t\t\t\tthis.span.style.wordBreak = \"break-word\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.wordBreak = \"normal\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {String} text Text. \r\n\t\t */\r\n\t\tsetText : function(text){\r\n\t\t\tthis.text.data = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text border.\r\n\t\t *\r\n\t\t * @method setTextBorder\r\n\t\t * @param {Number} size Border size in pixels.\r\n\t\t * @param {String} color CSS Color. \r\n\t\t */\r\n\t\tsetTextBorder : function(size, color) {\r\n\t\t\tthis.span.style.textShadow = \"-\" + size + \"px 0 \" + color + \", 0 \" + size + \"px \" + color + \", \" + size + \"px 0 \" + color + \", 0 -\" + size + \"px \" + color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set Text size, in pixels.\r\n\t\t * \r\n\t\t * @method setTextSize\r\n\t\t * @param {Number} size Size in pixel for this text element.\r\n\t\t */\r\n\t\tsetTextSize : function(size) {\r\n\t\t\tthis._elm.style.fontSize = size + \"px\";\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text color.\r\n\t\t * \r\n\t\t * @method setTextColor\r\n\t\t * @param {String} color Color code.\r\n\t\t */\r\n\t\tsetTextColor : function(color) {\r\n\t\t\tthis.span.style.color = color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text overflow handling\r\n\t\t *\r\n\t\t * @method setOverflow\r\n\t\t * @param {Number} overflow\r\n\t\t */\r\n\t\tsetOverflow : function(overflow) {\r\n\t\t\tif(overflow === TextMixin.ELLIPSIS) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"nowrap\";\r\n\t\t\t\tthis.span.style.textOverflow = \"ellipsis\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.textOverflow = \"clip\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text horizontal alignment.\r\n\t\t *  - TextMixin.CENTER\r\n\t\t *  - TextMixin.LEFT\r\n\t\t *  - TextMixin.RIGHT\r\n\t\t * \r\n\t\t * @method setAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetAlignment : function(align) \t{\r\n\t\t\tif(align === TextMixin.CENTER) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\t\tthis._elm.style.textAlign = \"center\";\r\n\t\t\t} else if(align === TextMixin.LEFT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-start\";\r\n\t\t\t\tthis._elm.style.textAlign = \"left\";\r\n\t\t\t} else if(align === TextMixin.RIGHT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-end\";\r\n\t\t\t\tthis._elm.style.textAlign = \"right\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text vertical alignment.\r\n\t\t *  - TextMixin.CENTER\r\n\t\t *  - TextMixin.TOP\r\n\t\t *  - TextMixin.BOTTOM\r\n\t\t * \r\n\t\t * @method setVerticalAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetVerticalAlignment : function(align) {\r\n\t\t\tif(align === TextMixin.CENTER) {\r\n\t\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\t} else if(align === TextMixin.TOP) {\r\n\t\t \t\tthis._elm.style.alignItems = \"flex-start\";\r\n\t\t\t} else if(align === TextMixin.BOTTOM) {\r\n\t\t\t\tthis._elm.style.alignItems = \"flex-end\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get size of the text inside of this component in px.\r\n\t\t * \r\n\t\t * @method measure\r\n\t\t * @return {Vector2} A vector with the size of the text. \r\n\t\t */\r\n\t\tmeasure : function() \t{\r\n\t\t \treturn new Vector2(this.span.offsetWidth, this.span.offsetHeight);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text internal margin in pixels.\r\n\t\t * \r\n\t\t * @method setMargin\r\n\t\t * @param {Number} margin Margin size in pixels.\r\n\t\t */\r\n\t\tsetMargin : function(margin) {\r\n\t\t\tthis.span.style.margin = margin + \"px\";\r\n\t\t},\r\n\r\n\t\tupdateSize : function() {\r\n\t\t\tif(this.fitContent) { \r\n\t\t\t\tthis.size.x = this.span.clientWidth;\r\n\t\t\t\tthis.size.y = this.span.clientHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tWidget.prototype.updateSize.call(this);\r\n\t\t},\r\n\r\n\t\tCENTER : 0,\r\n\t\tLEFT : 1,\r\n\t    RIGHT : 2,\r\n\t    TOP : 3,\r\n\t    BOTTOM : 4,\r\n\r\n\t    CLIP : 10,\r\n\t    ELLIPSIS : 11\r\n\r\n\t};\r\n\r\n\r\n\treturn TextMixin;\r\n});\ndefine('skylark-widgets-actions/buttons/ButtonText',[\n\t\"skylark-widgets-base/mixins/TextMixin\",\n\t\"../actions\",\n\t\"./Button\",\n],function(TextMixin,actions,Button){\n\t\"use strict\";\n\n\t/**\n\t * Button with text, inherits all methods available on the Text class.\n\t * \n\t * Used in menu bars, panels, etc.\n\t *\n\t * @class ButtonText\n\t * @extends {Button, Text}\n\t * @param {Widget} parent Parent widget.\n\t */\n\tvar ButtonText = Button.inherit({\n\n\t\t_construct : function (parent) {\n\t\t\tButton.prototype._construct.call(this, parent);\n\n\t\t\tvar skin = this.getSkin();\n\n\t\t\t/*\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\n\t\t\tthis._elm.style.color = skin.textColor;\n\t\t\tthis._elm.style.display = \"flex\";\n\t\t\t\n\t\t\t//Span\n\t\t\tthis.span = document.createElement(\"span\");\n\t\t\tthis.span.style.overflow = \"hidden\";\n\t\t\tthis._elm.appendChild(this.span);\n\n\t\t\t//Text\n\t\t\tthis.text = document.createTextNode(\"\");\n\t\t\tthis.span.appendChild(this.text);\n\n\n\t\t\t//this.setColor(Editor.theme.buttonColor, Editor.theme.buttonOverColor);\n\t\t\tthis.setColor(skin.buttonColor, skin.buttonOverColor);\n\t\t\tthis.allowWordBreak(false);\n\t\t\tthis.setVerticalAlignment(TextMixin.CENTER);\n\t\t\tthis.setAlignment(TextMixin.CENTER);\n\t\t\t*/\n\n\t\t\tthis._buildTextSpan();\n\n\t\t\t//this.setColor(Editor.theme.buttonColor, Editor.theme.buttonOverColor);\n\t\t\tthis.setColor(skin.buttonColor, skin.buttonOverColor);\n\n\t\t},\n\t\t...TextMixin\n\t});\n\t\n\n\treturn actions.buttons.ButtonText = ButtonText;\n});\n\ndefine('skylark-widgets-actions/menus/ButtonMenu',[\r\n\t\"../actions\",\r\n\t\"../buttons/ButtonText\"\r\n],function(actions,ButtonText){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button used in dropdown menus, context menus, etc.\r\n\t * \r\n\t * The button has text and its possible to add a icon.\r\n\t *\r\n\t * @class ButtonMenu\r\n\t * @extends {ButtonText}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\tvar ButtonMenu = ButtonText.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonText.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis.span.style.textIndent = \"25px\";\r\n\r\n\t\t\t/**\r\n\t\t\t * Icon element.\r\n\t\t\t *\r\n\t\t\t * @attribute icon\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.icon = null;\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\t//this.setColor(Editor.theme.buttonColor, Editor.theme.buttonOverColor);\r\n\t\t\tthis.setColor(skin.buttonColor, skin.buttonOverColor);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set button icon image URL.\r\n\t\t *\r\n\t\t * Creates the element if it still doesnt exist.\r\n\t\t *\r\n\t\t * @method setIcon\r\n\t\t * @param {String} icon Image URL.\r\n\t\t */\r\n\t\tsetIcon : function(icon) \t{\r\n\t\t\tif(this.icon === null) \t{\r\n\t\t\t\tthis.icon = document.createElement(\"img\");\r\n\t\t\t\tthis.icon.style.position = \"absolute\";\r\n\t\t\t\tthis.icon.style.display = \"block\";\r\n\t\t\t\tthis.icon.style.left = \"5px\";\r\n\t\t\t\tthis.icon.style.top = \"3px\";\r\n\t\t\t\tthis.icon.style.width = \"12px\";\r\n\t\t\t\tthis.icon.style.height = \"12px\";\r\n\t\t\t\tthis._elm.appendChild(this.icon);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.icon.src = icon;\r\n\t\t}\r\n\t});\r\n\treturn actions.buttons.ButtonMenu = ButtonMenu;\r\n});\ndefine('skylark-widgets-actions/menus/DropdownMenu',[\n\t\"skylark-langx-numerics/Vector2\",\n\t\"skylark-domx-geom\",\n\n\t\"skylark-widgets-base/Widget\",\n\t\"skylark-widgets-base/mixins/TextMixin\",\n\n\t\"./ButtonMenu\"\n],function(\n\tVector2,\n\tgeom,\n\t\n\tWidget,\n\tTextMixin,\n\n\tButtonMenu\n){\n\t\"use strict\";\n\n\t/**\n\t * Dropdown menu element, used to create dropdowns in menu bars and in context menus.\n\t * \n\t * @class DropdownMenu\n\t * @extends {Text}\n\t * @param {Widget} parent Parent widget. \n\t */\n\n\n\tvar DropdownMenu = Widget.inherit({\n\n\t\t_construct : function (parent) {\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\n\n\t\t\tthis._buildTextSpan();\n\n\n\t\t\tthis._elm.style.backgroundColor = Editor.theme.buttonColor;\n\t\t\tthis._elm.style.cursor = \"pointer\";\n\t\t\tthis._elm.style.pointerEvents = \"auto\";\n\n\t\t\tthis.preventDragEvents();\n\n\t\t\t/**\n\t\t\t * Panel element, where the options are stored.\n\t\t\t *\n\t\t\t * This DOM element is added directly to the parent DOM element.\n\t\t\t *\n\t\t\t * @attribute panel\n\t\t\t * @type {DOM}\n\t\t\t */\n\t\t\tthis.panel = new Widget(parent, \"div\");\n\t\t\tthis.panel._elm.style.overflow = \"visible\";\n\t\t\tthis.panel._elm.style.display = \"none\";\n\t\t\tthis.panel._elm.style.zIndex = \"300\";\n\n\t\t\t/**\n\t\t\t * Option icon image, the element is only created when a icon is set.\n\t\t\t *\n\t\t\t * @attribute icon\n\t\t\t * @type {DOM}\n\t\t\t */\n\t\t\tthis.icon = null;\n\n\t\t\t/**\n\t\t\t * Decorative arrow.\n\t\t\t *\n\t\t\t * @attribute arrow\n\t\t\t * @type {DOM}\n\t\t\t */\n\t\t\tthis.arrow = document.createElement(\"img\");\n\t\t\tthis.arrow.style.display = \"none\";\n\t\t\tthis.arrow.style.position = \"absolute\";\n\t\t\tthis.arrow.style.right = \"5px\";\n\t\t\tthis.arrow.style.top = \"3px\";\n\t\t\tthis.arrow.style.width = \"12px\";\n\t\t\tthis.arrow.style.height = \"12px\";\n\t\t\t//this.arrow.src = Global.FILE_PATH + \"icons/misc/arrow_right.png\";\n\t\t\tthis._elm.appendChild(this.arrow);\n\n\t\t\t/**\n\t\t\t * Direction to open the dropdown.\n\t\t\t *\n\t\t\t * @attribute direction\n\t\t\t * @type {Number}\n\t\t\t */\n\t\t\tthis.direction = DropdownMenu.DOWN;\n\t\t\t\n\t\t\t/**\n\t\t\t * Indicates if the dropdown menu is expanded.\n\t\t\t *\n\t\t\t * @attribute expanded\n\t\t\t * @type {Boolean}\n\t\t\t */\n\t\t\tthis.expanded = false;\n\t\t\tthis.optionsSize = new Vector2(150, 20);\n\n\t\t\t/**\n\t\t\t * Options available in the dropdown.\n\t\t\t *\n\t\t\t * Options are stored as: {button:button, value:object, name:string}\n\t\t\t *\n\t\t\t * @attribute options\n\t\t\t * @type {Array}\n\t\t\t */\n\t\t\tthis.options = [];\n\n\t\t\tvar self = this;\n\n\t\t\tthis._elm.onmouseenter = function()\n\t\t\t{\n\t\t\t\tself.setExpanded(true);\n\t\t\t\tself._elm.style.backgroundColor = Editor.theme.buttonOverColor;\n\t\t\t};\n\n\t\t\tthis._elm.onmouseleave = function()\n\t\t\t{\n\t\t\t\tself.setExpanded(false);\n\t\t\t\tself._elm.style.backgroundColor = Editor.theme.buttonColor;\n\t\t\t};\n\t\t\t\n\t\t\tthis.panel._elm.onmouseenter = function()\n\t\t\t{\n\t\t\t\tself.setExpanded(true);\n\t\t\t};\n\n\t\t\tthis.panel._elm.onmouseleave = function()\n\t\t\t{\n\t\t\t\tself.setExpanded(false);\n\t\t\t};\n\n\t\t},\n\n\t\t/**\n\t\t * Set location to where options should open.\n\t\t *\n\t\t * @method setDirection\n\t\t */\n\t\tsetDirection : function(location) {\n\t\t\tthis.direction = location;\n\t\t},\n\n\t\t/**\n\t\t * Show arrow.\n\t\t *\n\t\t * @method showArrow\n\t\t */\n\t\tshowArrow : function() {\n\t\t\tthis.arrow.style.display = \"block\";\n\t\t},\n\n\t\t/**\n\t\t * Set icon.\n\t\t *\n\t\t * @method setIcon\n\t\t * @param {String} icon Image URL.\n\t\t */\n\t\tsetIcon : function(icon) {\n\t\t\tif(this.icon === null) {\n\t\t\t\tthis.icon = document.createElement(\"img\");\n\t\t\t\tthis.icon.style.display = \"block\";\n\t\t\t\tthis.icon.style.position = \"absolute\";\n\t\t\t\tthis.icon.style.left = \"5px\";\n\t\t\t\tthis.icon.style.top = \"3px\";\n\t\t\t\tthis.icon.style.width = \"12px\";\n\t\t\t\tthis.icon.style.height = \"12px\";\n\t\t\t\tthis._elm.appendChild(this.icon);\n\t\t\t}\n\n\t\t\tthis.icon.src = icon;\n\t\t},\n\n\t\t/**\n\t\t * Remove option from menu.\n\t\t *\n\t\t * @method removeOption\n\t\t * @param {Number} index\n\t\t */\n\t\tremoveOption : function(index) {\n\t\t\tif(index >= 0 && index < this.options.length) {\n\t\t\t\tthis.options[index].destroy();\n\t\t\t\tthis.options.splice(index, 1);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add new option to menu\n\t\t *\n\t\t * @method addOption\n\t\t * @param {String} name of the option\n\t\t * @param {Function} callback Callback function\n\t\t * @param {String} icon Icon URL.\n\t\t * @return {ButtonMenu} Button created for the new option.\n\t\t */\n\t\taddOption : function(name, callback, icon) {\n\t\t\tvar button = new ButtonMenu(this.panel);\n\t\t\tbutton._elm.style.zIndex = \"200\";\n\t\t\tbutton.setText(name);\n\t\t\tbutton.setAlignment(Text.LEFT);\n\t\t\tbutton.position.set(25, 0);\n\n\t\t\tvar self = this;\n\t\t\tbutton.setOnClick(function(){\n\t\t\t\tcallback();\n\t\t\t\tself.setExpanded(false);\n\t\t\t});\n\n\t\t\tif(icon !== undefined) \t{\n\t\t\t\tbutton.setIcon(icon);\n\t\t\t}\n\n\t\t\tthis.options.push(button);\n\n\t\t\treturn button;\n\t\t},\n\n\t\t/**\n\t\t * Add new menu to menu.\n\t\t *\n\t\t * @method addOption\n\t\t * @param {String} name Name of the option.\n\t\t * @param {String} icon Optional icon, image URL.\n\t\t * @return {DropdownMenu} The new menu created.\n\t\t */\n\t\taddMenu : function(name, icon) {\n\t\t\tvar menu = new DropdownMenu(this.panel);\n\t\t\tmenu.setText(name);\n\t\t\tmenu.setDirection(DropdownMenu.LEFT);\n\t\t\tmenu.showArrow();\n\t\t\tmenu.setAlignment(Text.LEFT);\n\t\t\tmenu.setMargin(25);\n\t\t\t\n\t\t\tif(icon !== undefined)\n\t\t\t{\n\t\t\t\tmenu.setIcon(icon);\n\t\t\t}\n\n\t\t\tthis.options.push(menu);\n\n\t\t\treturn menu;\n\t\t},\n\n\t\t/** \n\t\t * Update expanded state, position all options in this dropdown.\n\t\t * \n\t\t * @method setExpanded\n\t\t * @param {Boolean} expanded If true the menu will be expanded.\n\t\t */\n\t\tsetExpanded : function(expanded){\n\t\t\tthis.expanded = expanded;\n\n\t\t\tif(this.expanded) {\n\t\t\t\tthis.panel._elm.style.display = \"block\";\n\n\t\t\t\tif(this.direction === DropdownMenu.DOWN){\n\t\t\t\t\tthis.panel._elm.style.top = (this.position.y + this.size.y) + \"px\";\n\t\t\t\t\tthis.panel._elm.style.left = this.position.x + \"px\";\n\n\t\t\t\t\t//var out = DOMUtils.checkBorder(this.panel);\n\t\t\t\t\tvar out = geom.testAsis(this.panel);\n\n\t\t\t\t\tif(out.y !== 0)\t{\n\t\t\t\t\t\tthis.panel._elm.style.top = null;\n\t\t\t\t\t\tthis.panel._elm.style.bottom = (this.position.y + this.size.y) + \"px\";\n\t\t\t\t\t}\n\t\t\t\t\tif(out.x !== 0)\t{\n\t\t\t\t\t\tthis.panel._elm.style.left = (this.position.x - out.x) + \"px\"; \n\t\t\t\t\t}\n\t\t\t\t} else if(this.direction === DropdownMenu.UP){\n\t\t\t\t\tthis.panel._elm.style.bottom = (this.position.y + this.size.y) + \"px\";\n\t\t\t\t\tthis.panel._elm.style.left = this.position.x + \"px\";\n\n\t\t\t\t\t//var out = DOMUtils.checkBorder(this.panel);\n\t\t\t\t\tvar out = geom.testAsis(this.panel);\n\t\t\t\t\tif(out.y !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.panel._elm.style.bottom = null;\n\t\t\t\t\t\tthis.panel._elm.style.top = (this.position.y + this.size.y) + \"px\";\n\t\t\t\t\t}\n\t\t\t\t\tif(out.x !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.panel._elm.style.left = (this.position.x - out.x) + \"px\"; \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(this.direction === DropdownMenu.LEFT)\n\t\t\t\t{\n\t\t\t\t\tthis.panel._elm.style.top = this.position.y + \"px\";\n\t\t\t\t\tthis.panel._elm.style.left = (this.position.x + this.size.x) + \"px\";\n\n\t\t\t\t\t//var out = DOMUtils.checkBorder(this.panel);\n\t\t\t\t\tvar out = geom.testAsis(this.panel);\n\t\t\t\t\tif(out.x !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.panel._elm.style.left = (this.position.x - this.size.x) + \"px\"; \n\t\t\t\t\t}\n\t\t\t\t\tif(out.y !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.panel._elm.style.top = (this.position.y - out.y) + \"px\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(this.direction === DropdownMenu.RIGHT)\n\t\t\t\t{\n\t\t\t\t\tthis.panel._elm.style.top = this.position.y + \"px\";\n\t\t\t\t\tthis.panel._elm.style.left = (this.position.x - this.size.x) + \"px\";\n\n\t\t\t\t\t//var out = DOMUtils.checkBorder(this.panel);\n\t\t\t\t\tvar out = geom.testAsis(this.panel);\n\t\t\t\t\tif(out.x !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.panel._elm.style.left = (this.position.x + this.size.x) + \"px\";\n\t\t\t\t\t}\n\t\t\t\t\tif(out.y !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.panel._elm.style.top = (this.position.y - out.y) + \"px\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tthis.panel._elm.style.display = \"none\";\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Update all options in the menu.\n\t\t * \n\t\t * @method updateOptions\n\t\t */\n\t\tupdateOptions : function() {\n\t\t\tfor(var i = 0; i < this.options.length; i++) {\n\t\t\t\tthis.options[i].size.set(this.optionsSize.x, this.optionsSize.y);\n\t\t\t\tthis.options[i].position.set(0, this.optionsSize.y * i);\n\t\t\t\tthis.options[i].updateInterface();\n\t\t\t}\n\n\t\t\tthis.panel._elm.style.width = this.size.x + \"px\";\n\t\t\tthis.panel._elm.style.height = (this.optionsSize.y * this.options.length) + \"px\";\n\t\t},\n\n\t\tdestroy : function() {\n\t\t\tWidget.prototype.destroy.call(this);\n\n\t\t\tthis.parent.destroy();\n\t\t},\n\n\t\tupdateSize : function() {\n//\t\t\tText.prototype.updateSize.call(this);\n\n\t\t\tthis.updateOptions();\n\t\t},\n\n\n\t\t...TextMixin\n\n\t});\n\n\n\tDropdownMenu.DOWN = 0;\n\tDropdownMenu.UP = 1;\n\tDropdownMenu.LEFT = 2;\n\tDropdownMenu.RIGHT = 3;\n\n\n\n\treturn DropdownMenu;\n});\ndefine('skylark-widgets-actions/menus/ContextMenu',[\n\t\"skylark-langx-numerics/Vector2\",\n\t\"skylark-domx-geom\",\n\t\"skylark-widgets-base/Widget\",\n\t\"../actions\",\n\t\"./ButtonMenu\",\n\t\"./DropdownMenu\"\n],function(\n\tVector2,\n\tgeom,\n\n\tWidget,\n\tactions,\n\tButtonMenu,\n\tDropdownMenu\n){\n\t\"use strict\";\n\n\t/**\n\t * Context menu widget.\n\t * \n\t * @class ContextMenu\n\t * @extends {Widget}\n\t * @param {Widget} parent Parent widget.\n\t */\n\tvar ContextMenu = Widget.inherit({\n\n\t\t_construct : function (parent) {\t\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\n\n\t\t\tvar self = this;\n\n\t\t\tthis._elm.style.overflow = \"visible\";\n\t\t\tthis._elm.style.zIndex = \"300\";\n\t\t\tthis._elm.onmouseleave = function()\t{\n\t\t\t\tself.destroy();\n\t\t\t};\n\n\t\t\tthis.offset = new Vector2(20, 10);\n\t\t\t\n\t\t\t/**\n\t\t\t * Options in this menu.\n\t\t\t * \n\t\t\t * @attribute options\n\t\t\t * @type {Array}\n\t\t\t */\n\t\t\tthis.options = [];\n\t\t},\n\n\n\t\t/**\n\t\t * Set the text of this context menu.\n\t\t * \n\t\t * @method setText\n\t\t * @param {String} text\n\t\t */\n\t\tsetText : function(text) {\n\t\t\tthis.text.setText(text);\n\t\t},\n\n\t\t/**\n\t\t * Remove option from context menu.\n\t\t *\n\t\t * @method removeOption\n\t\t * @param {Number} index\n\t\t */\n\t\tremoveOption : function(index) {\n\t\t\tif(index >= 0 && index < this.options.length)\t{\n\t\t\t\tthis.options[index].destroy();\n\t\t\t\tthis.options.splice(index, 1);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add new option to context menu\n\t\t *\n\t\t * @method addOption\n\t\t * @param {String} name of the option\n\t\t * @param {Function} callback Callback function\n\t\t */\n\t\taddOption : function(name, callback) {\n\t\t\tvar button = new ButtonMenu(this);\n\t\t\tbutton._elm.style.zIndex = \"10000\";\n\t\t\tbutton.setText(name);\n\t\t\tbutton.setAlignment(Text.LEFT);\n\t\t\tbutton.position.x = 25;\n\n\t\t\tvar self = this;\n\t\t\tbutton.setOnClick(function(){\n\t\t\t\tcallback();\n\t\t\t\tself.destroy();\n\t\t\t});\n\n\t\t\tthis.options.push(button);\n\t\t},\n\n\t\t/**\n\t\t * Add new menu to context menu\n\t\t *\n\t\t * @method addOption\n\t\t * @param {String} name of the option.\n\t\t * @return {DropdownMenu} The new menu created.\n\t\t */\n\t\taddMenu : function(name) {\n\t\t\tvar menu = new DropdownMenu(this);\n\t\t\tmenu.setText(name);\n\t\t\tmenu.setDirection(DropdownMenu.LEFT);\n\t\t\tmenu.showArrow();\n\t\t\tmenu.setAlignment(Text.LEFT);\n\t\t\tmenu.setMargin(25);\n\n\t\t\tthis.options.push(menu);\n\n\t\t\treturn menu;\n\t\t},\n\n\t\t/**\n\t\t * Update all options in the menu.\n\t\t * \n\t\t * @method updateOptions\n\t\t */\n\t\tupdateOptions : function() {\n\t\t\tfor(var i = 0; i < this.options.length; i++)\n\t\t\t{\n\t\t\t\tthis.options[i].size.copy(this.size);\n\t\t\t\tthis.options[i].position.set(0, this.size.y * i);\n\t\t\t\tthis.options[i].updateInterface();\n\t\t\t}\n\t\t},\n\n\t\tupdateSize : function()\t{\n\t\t\tthis._elm.style.width = this.size.x + \"px\";\n\t\t\tthis._elm.style.height = (this.size.y * this.options.length) + \"px\";\n\n\t\t\tthis.updateOptions();\n\t\t},\n\n\t\tupdatePosition : function() {\n\t\t\tthis._elm.style.top = (this.position.y - this.offset.y) + \"px\";\n\t\t\tthis._elm.style.left = (this.position.x - this.offset.x) + \"px\";\n\n\t\t\t//Check if its inside window\n\t\t\t\n\t\t\t//var out = DOMUtils.checkBorder(this._elm);\n\t\t\tvar out = geom.testAxis(this._elm);\n\t\t\tif(out.x !== 0)\n\t\t\t{\n\t\t\t\tthis._elm.style.left = (this.position.x + this.offset.x - this.size.x) + \"px\"; \n\t\t\t}\n\t\t\tif(out.y !== 0)\n\t\t\t{\n\t\t\t\tthis._elm.style.top = (this.position.y - this.offset.y - out.y) + \"px\";\n\t\t\t}\n\n\t\t}\n\t});\n\n\treturn actions.menus.ContextMenu = ContextMenu;\n});\ndefine('skylark-widgets-actions/main',[\r\n\t\"./actions\",\r\n\t\"./buttons/Button\",\r\n\t\"./buttons/ButtonDrawer\",\r\n\t\"./buttons/ButtonImage\",\r\n\t\"./buttons/ButtonImageToggle\",\r\n\t\"./buttons/ButtonText\",\r\n\t\"./menus/ButtonMenu\",\r\n\t\"./menus/ContextMenu\",\r\n\t\"./menus/DropdownMenu\"\r\n],function(texts){\r\n\treturn actions;\r\n});\ndefine('skylark-widgets-actions', ['skylark-widgets-actions/main'], function (main) { return main; });\n\n"]}