{"version":3,"sources":["button-drawer.js"],"names":["define","Vector2","Panel","buttons","ButtonImage","ButtonDrawer","inherit","_construct","parent","prototype","call","this","skin","getSkin","_elm","style","zIndex","backgroundColor","buttonColor","overflow","panel","element","position","barColor","items","itemsPerLine","itemsSize","itemsScale","expanded","setExpanded","self","onmouseenter","buttonOverColor","onmouseleave","clear","i","length","destroy","display","insertItem","setParent","push","addItem","image","callback","altText","button","setImage","setOnClick","updateInterface","undefined","setAltText","removeItem","index","splice","updatePanelSize","size","x","y","Math","floor","updateSize","set","updatePosition","updateItems","updateVisibility","visible","optionsSize","get","v","optionsPerLine","addOption","insertOption","updateOptions","removeOption","reomveItem"],"mappings":"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","file":"../button-drawer.js","sourcesContent":["define([\r\n\t\"skylark-langx-numerics/vector2\",\r\n\t\"skylark-widgets-base/panels/panel\",\r\n\t\"./buttons\",\r\n\t\"./button-image\"\r\n],function(\r\n\tVector2,\r\n\tPanel,\r\n\tbuttons,\r\n\tButtonImage\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with text, inherits all methods available on the Text class.\r\n\t * \r\n\t * Used in menu bars, panels, etc.\r\n\t *\r\n\t * @class ButtonDrawer\r\n\t * @extends {ButtonImage}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar ButtonDrawer = ButtonImage.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonImage.prototype._construct.call(this, parent);\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.zIndex = \"200\";\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.buttonColor;\r\n\t\t\tthis._elm.style.overflow = \"visible\";\r\n\r\n\t\t\tthis.panel = new Panel(this);\r\n\t\t\tthis.panel.element.style.position = \"absolute\";\r\n\t\t\tthis.panel.element.style.overflow = \"visible\";\r\n\t\t\t//this.panel.element.style.backgroundColor = Editor.theme.barColor;\r\n\t\t\tthis.panel.element.style.backgroundColor = skin.barColor;\r\n\t\t\tthis.panel.element.style.zIndex = \"250\";\r\n\r\n\t\t\t/** \r\n\t\t\t * List of the items in this panel.\r\n\t\t\t *\r\n\t\t\t * @attribute items\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.items = [];\r\n\r\n\t\t\t/**\r\n\t\t\t * Number of maximum items per row\r\n\t\t\t *\r\n\t\t\t * @attribute itemsPerLine\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.itemsPerLine = 3;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Size of each option, also affects the size of the panel.\r\n\t\t\t *\r\n\t\t\t * @attribute itemsSize\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.itemsSize = new Vector2(40, 40);\r\n\r\n\t\t\t/**\r\n\t\t\t * Scale of the inner icon of the items created from the addItem() method.\r\n\t\t\t *\r\n\t\t\t * @attribute itemsScale\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.itemsScale = new Vector2(0.7, 0.7);\r\n\r\n\t\t\t/**\r\n\t\t\t * Indicates if the button drawer panel is visible.\r\n\t\t\t *\r\n\t\t\t * @attribute expanded\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.expanded = false;\r\n\t\t\tthis.setExpanded(false);\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonOverColor;\r\n\t\t\t\tself.element.style.backgroundColor = skin.buttonOverColor;\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis._elm.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\t\tself.element.style.backgroundColor = skin.buttonColor;\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\r\n\t\t\tthis.panel.element.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis.panel.element.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\t\t},\r\n\r\n\r\n\t\tclear : function(){\r\n\t\t\tfor(var i = 0; i < this.items.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.items[i].destroy();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.items = [];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Expand or close the button drawer panel.\r\n\t\t *\r\n\t\t * @method setExpanded\r\n\t\t * @param {Boolean} expanded\r\n\t\t */\r\n\t\tsetExpanded : function(expanded){\r\n\t\t\tthis.expanded = expanded;\r\n\t\t\tthis.panel.element.style.display = this.expanded ? \"block\" : \"none\";\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Insert new option from already created element.\r\n\t\t *\r\n\t\t * @method insertItem\r\n\t\t * @param {Widget} Widget of the option to be inserted in the drawer\r\n\t\t */\r\n\t\tinsertItem : function(element){\r\n\t\t\telement.setParent(this.panel);\r\n\t\t\tthis.items.push(element);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Add new option to the menu.\r\n\t\t * \r\n\t\t * @method addItem\r\n\t\t * @param {String} image\r\n\t\t * @param {Function} callback\r\n\t\t * @param {String} altText\r\n\t\t */\r\n\t\taddItem : function(image, callback, altText){\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tvar button = new ButtonImage(this.panel);\r\n\t\t\tbutton.setImage(image);\r\n\t\t\tbutton.setOnClick(function()\r\n\t\t\t{\r\n\t\t\t\tcallback();\r\n\t\t\t\tself.expanded = false;\r\n\t\t\t\tself.updateInterface();\r\n\t\t\t});\r\n\r\n\t\t\tif(altText !== undefined)\r\n\t\t\t{\r\n\t\t\t\tbutton.setAltText(altText);\r\n\t\t\t}\r\n\r\n\t\t\tthis.items.push(button);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove an option from the menu.\r\n\t\t *\r\n\t\t * @method removeItem\r\n\t\t * @param {Number} index\r\n\t\t */\r\n\t\tremoveItem : function(index) \t{\r\n\t\t\tif(index >= 0 && index < this.items.length)\r\n\t\t\t{\r\n\t\t\t\tthis.items[index].destroy();\r\n\t\t\t\tthis.items.splice(index, 1);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Updates drawer panel size based on the number of items available.\r\n\t\t * \r\n\t\t * @method updatePanelSize\r\n\t\t */\r\n\t\tupdatePanelSize : function()\t{\r\n\t\t\tvar itemsPerLine = (this.items.length < this.itemsPerLine) ? this.items.length : this.itemsPerLine;\r\n\r\n\t\t\tthis.panel.size.x = (this.itemsSize.x * itemsPerLine);\r\n\t\t\tthis.panel.size.y = (this.itemsSize.y * (Math.floor((this.items.length - 1) / itemsPerLine) + 1));\r\n\t\t\tthis.panel.updateSize();\r\n\r\n\t\t\tthis.panel.position.set(this.itemsSize.x, 0);\r\n\t\t\tthis.panel.updatePosition();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update drawer items position and size.\r\n\t\t *\r\n\t\t * Should be called after change in items displacement variables).\r\n\t\t *\r\n\t\t * @method updateItems\r\n\t\t */\r\n\t\tupdateItems : function()\t{\r\n\t\t\tthis.updatePanelSize();\r\n\r\n\t\t\tvar itemsPerLine = (this.items.length < this.itemsPerLine) ? this.items.length : this.itemsPerLine;\r\n\r\n\t\t\tfor(var i = 0; i < this.items.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.items[i].size.set(this.itemsSize.x, this.itemsSize.y);\r\n\t\t\t\tthis.items[i].position.x = this.itemsSize.x * (i % itemsPerLine);\r\n\t\t\t\tthis.items[i].position.y = this.itemsSize.y * Math.floor(i / itemsPerLine);\r\n\t\t\t\tthis.items[i].updateInterface();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateVisibility : function()\t{\r\n\t\t\tthis._elm.style.display = this.visible ? \"block\" : \"none\";\r\n\t\t},\r\n\r\n\r\n\t\toptionsSize : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this.itemsSize;\r\n\t\t\t},\r\n\r\n\t\t\tset : function(v) {\r\n\t\t\t\tthis.itemsSize = v\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\toptionsPerLine : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this.itemsPerLine;\r\n\t\t\t},\r\n\r\n\t\t\tset : function(v) {\r\n\t\t\t\tthis.itemsPerLine = v\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t\r\n\tButtonDrawer.prototype.addOption = ButtonDrawer.prototype.addItem;\r\n\tButtonDrawer.prototype.insertOption = ButtonDrawer.prototype.insertItem;\r\n\tButtonDrawer.prototype.updateOptions = ButtonDrawer.prototype.updateItems;\r\n\tButtonDrawer.prototype.removeOption = ButtonDrawer.prototype.reomveItem;\r\n\r\n\r\n\treturn buttons.ButtonDrawer = ButtonDrawer;\r\n});"]}