{"version":3,"sources":["skylark-widgets-actions.js"],"names":["define","skylark","attach","buttons","menus","Widget","actions","Button","inherit","_construct","parent","prototype","call","this","_elm","style","cursor","preventDragEvents","setColor","baseColor","overColor","backgroundColor","onmouseenter","onmouseleave","setStyles","baseStyle","overStyle","i","Vector2","ImageMixin","_buildImage","icon","document","createElement","pointerEvents","position","top","left","width","height","appendChild","setImage","image","src","setImageScale","x","y","ButtonImage","Editor","theme","buttonOverColor","ButtonDrawer","zIndex","buttonColor","overflow","panel","element","barColor","items","itemsPerLine","itemsSize","itemsScale","expanded","setExpanded","self","clear","length","destroy","display","insertItem","attachTo","push","addItem","callback","altText","button","setOnClick","updateInterface","undefined","setAltText","removeItem","index","splice","updatePanelSize","size","Math","floor","updateSize","set","updatePosition","updateItems","updateVisibility","visible","optionsSize","get","v","optionsPerLine","addOption","insertOption","updateOptions","removeOption","reomveItem","ButtonImageToggle","justifyContent","alignItems","skin","getSkin","selected","onclick","setSelected","TextMixin","ButtonText","color","textColor","_buildText","ButtonMenu","span","textIndent","setIcon","geom","DropdownMenu","arrow","right","arrowRightImageUrl","direction","DOWN","setDirection","location","showArrow","name","setText","setAlignment","LEFT","addMenu","menu","setMargin","out","testAxis","bottom","UP","RIGHT","ContextMenu","offset","text","Text","copy","texts","main"],"mappings":"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","file":"../skylark-widgets-actions.js","sourcesContent":["define('skylark-widgets-actions/actions',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark) {\r\n\tvar actions = {\r\n\t\tbuttons : {},\r\n\t\tmenus : {}\r\n\t};\r\n\r\n\treturn skylark.attach(\"widgets.actions\",actions);\r\n\r\n});\r\n\r\n\ndefine('skylark-widgets-actions/buttons/Button',[\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"../actions\"\t\r\n],function(Widget,actions){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Base button class.\r\n\t * \r\n\t * @class Button\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar Button = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tthis._elm.style.cursor = \"pointer\";\r\n\r\n\t\t\tthis.preventDragEvents();\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set button color.\r\n\t\t * \r\n\t\t * When mouse is over the button uses the overColor, when the mouse gets outside of the button it uses the base color.\r\n\t\t * \r\n\t\t * @method setColor\r\n\t\t * @param {String} baseColor CSS color for the button background.\r\n\t\t * @param {String} overColor CSS color for the button when mouse is over it.\r\n\t\t */\r\n\t\tsetColor : function(baseColor, overColor){\r\n\t\t\tthis._elm.style.backgroundColor = baseColor;\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\t{\r\n\t\t\t\tthis.style.backgroundColor = overColor;\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function()\t{\r\n\t\t\t\tthis.style.backgroundColor = baseColor;\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set button styles, the style can be descriped in a object.\r\n\t\t *\r\n\t\t * Here is an exaple of a style object:\r\n\t\t * {\r\n\t\t * backgroundColor: \"#FF0000\",\r\n\t\t * color: \"#FFFFFF\"\r\n\t\t * }\r\n\t\t *\r\n\t\t * @method setColor\r\n\t\t * @param {Object} baseStyle Object with the style to be applied as base.\r\n\t\t * @param {Object} overStyle Object with the style to be applied when mouse is over.\r\n\t\t */\r\n\t\tsetStyles : function(baseStyle, overStyle)\t{\r\n\t\t\tfor(var i in baseStyle)\r\n\t\t\t{\r\n\t\t\t\tthis._elm.style[i] = baseStyle[i];\r\n\t\t\t}\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\t{\r\n\t\t\t\tfor(var i in overStyle)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.style[i] = overStyle[i];\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function()\t{\r\n\t\t\t\tfor(var i in baseStyle)\t{\r\n\t\t\t\t\tthis.style[i] = baseStyle[i];\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\treturn actions.buttons.Button = Button;\r\n});\ndefine('skylark-widgets-base/mixins/ImageMixin',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"../Widget\"\r\n],function(\r\n\tVector2,\r\n\tWidget\r\n){\r\n\t\"use strict\";\r\n\r\n\tvar ImageMixin = {\r\n\t\t_buildImage : function (parent) {\r\n\t\t\t/**\r\n\t\t\t * Button icon.\r\n\t\t\t * \r\n\t\t\t * @attribute icon\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.icon = document.createElement(\"img\");\r\n\t\t\tthis.icon.style.pointerEvents = \"none\";\r\n\t\t\tthis.icon.style.position = \"absolute\";\r\n\t\t\tthis.icon.style.top = \"15%\";\r\n\t\t\tthis.icon.style.left = \"15%\";\r\n\t\t\tthis.icon.style.width = \"70%\";\r\n\t\t\tthis.icon.style.height = \"70%\";\r\n\t\t\tthis._elm.appendChild(this.icon);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set button drawer icon.\r\n\t\t *\r\n\t\t * @method setImage\r\n\t\t * @param {String} image Image URL.\r\n\t\t */\r\n\t\tsetImage : function(image) {\r\n\t\t\tthis.icon.src = image;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set icon scale, the icon will be centered.\r\n\t\t *\r\n\t\t * @method setImageScale\r\n\t\t */\r\n\t\tsetImageScale : function(x, y){\r\n\t\t\tthis.icon.style.top = ((1 - y) / 2 * 100) + \"%\";\r\n\t\t\tthis.icon.style.left = ((1 - x) / 2 * 100) + \"%\";\r\n\t\t\tthis.icon.style.width = (x * 100) + \"%\";\r\n\t\t\tthis.icon.style.height = (y * 100) + \"%\";\r\n\t\t}\r\n\r\n\t};\r\n\r\n\treturn ImageMixin;\r\n});\ndefine('skylark-widgets-actions/buttons/ButtonImage',[\r\n\t\"skylark-widgets-base/mixins/ImageMixin\",\r\n\t\"../actions\",\r\n\t\"./Button\"\r\n],function(ImageMixin,actions,Button){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with a centered icon.\r\n\t *\r\n\t * @class ButtonImageToggle\r\n\t * @extends {Button}\r\n\t * @param {Element} parent Parent element.\r\n\t */\r\n\tvar ButtonImage = Button.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButton.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis._buildImage();\r\n\t\t\tthis.setColor(null, Editor.theme.buttonOverColor);\r\n\t\t},\r\n\r\n\t\t...ImageMixin\r\n\r\n\t});\r\n\r\n\treturn actions.buttons.ButtonImage = ButtonImage;\r\n});\ndefine('skylark-widgets-actions/buttons/ButtonDrawer',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"../actions\",\r\n\t\"./ButtonImage\"\r\n],function(\r\n\tVector2,\r\n\tWidget,\r\n\tactions,\r\n\tButtonImage\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with text, inherits all methods available on the Text class.\r\n\t * \r\n\t * Used in menu bars, panels, etc.\r\n\t *\r\n\t * @class ButtonDrawer\r\n\t * @extends {ButtonImage}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar ButtonDrawer = ButtonImage.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonImage.prototype._construct.call(this, parent);\r\n\r\n\r\n\t\t\tthis._elm.style.zIndex = \"200\";\r\n\t\t\tthis._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.overflow = \"visible\";\r\n\r\n\t\t\tthis.panel = new Widget(this, \"div\");\r\n\t\t\tthis.panel.element.style.overflow = \"visible\";\r\n\t\t\tthis.panel.element.style.backgroundColor = Editor.theme.barColor;\r\n\t\t\tthis.panel.element.style.zIndex = \"250\";\r\n\r\n\t\t\t/** \r\n\t\t\t * List of the items in this panel.\r\n\t\t\t *\r\n\t\t\t * @attribute items\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.items = [];\r\n\r\n\t\t\t/**\r\n\t\t\t * Number of maximum items per row\r\n\t\t\t *\r\n\t\t\t * @attribute itemsPerLine\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.itemsPerLine = 3;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Size of each option, also affects the size of the panel.\r\n\t\t\t *\r\n\t\t\t * @attribute itemsSize\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.itemsSize = new Vector2(40, 40);\r\n\r\n\t\t\t/**\r\n\t\t\t * Scale of the inner icon of the items created from the addItem() method.\r\n\t\t\t *\r\n\t\t\t * @attribute itemsScale\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.itemsScale = new Vector2(0.7, 0.7);\r\n\r\n\t\t\t/**\r\n\t\t\t * Indicates if the button drawer panel is visible.\r\n\t\t\t *\r\n\t\t\t * @attribute expanded\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.expanded = false;\r\n\t\t\tthis.setExpanded(false);\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\tself.element.style.backgroundColor = Editor.theme.buttonOverColor;\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis._elm.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\tself.element.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\r\n\t\t\tthis.panel.element.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis.panel.element.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\t\t},\r\n\r\n\r\n\t\tclear : function(){\r\n\t\t\tfor(var i = 0; i < this.items.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.items[i].destroy();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.items = [];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Expand or close the button drawer panel.\r\n\t\t *\r\n\t\t * @method setExpanded\r\n\t\t * @param {Boolean} expanded\r\n\t\t */\r\n\t\tsetExpanded : function(expanded){\r\n\t\t\tthis.expanded = expanded;\r\n\t\t\tthis.panel.element.style.display = this.expanded ? \"block\" : \"none\";\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Insert new option from already created element.\r\n\t\t *\r\n\t\t * @method insertItem\r\n\t\t * @param {Widget} Widget of the option to be inserted in the drawer\r\n\t\t */\r\n\t\tinsertItem : function(element){\r\n\t\t\telement.attachTo(this.panel);\r\n\t\t\tthis.items.push(element);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Add new option to the menu.\r\n\t\t * \r\n\t\t * @method addItem\r\n\t\t * @param {String} image\r\n\t\t * @param {Function} callback\r\n\t\t * @param {String} altText\r\n\t\t */\r\n\t\taddItem : function(image, callback, altText){\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tvar button = new ButtonImage(this.panel);\r\n\t\t\tbutton.setImage(image);\r\n\t\t\tbutton.setOnClick(function()\r\n\t\t\t{\r\n\t\t\t\tcallback();\r\n\t\t\t\tself.expanded = false;\r\n\t\t\t\tself.updateInterface();\r\n\t\t\t});\r\n\r\n\t\t\tif(altText !== undefined)\r\n\t\t\t{\r\n\t\t\t\tbutton.setAltText(altText);\r\n\t\t\t}\r\n\r\n\t\t\tthis.items.push(button);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove an option from the menu.\r\n\t\t *\r\n\t\t * @method removeItem\r\n\t\t * @param {Number} index\r\n\t\t */\r\n\t\tremoveItem : function(index) \t{\r\n\t\t\tif(index >= 0 && index < this.items.length)\r\n\t\t\t{\r\n\t\t\t\tthis.items[index].destroy();\r\n\t\t\t\tthis.items.splice(index, 1);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Updates drawer panel size based on the number of items available.\r\n\t\t * \r\n\t\t * @method updatePanelSize\r\n\t\t */\r\n\t\tupdatePanelSize : function()\t{\r\n\t\t\tvar itemsPerLine = (this.items.length < this.itemsPerLine) ? this.items.length : this.itemsPerLine;\r\n\r\n\t\t\tthis.panel.size.x = (this.itemsSize.x * itemsPerLine);\r\n\t\t\tthis.panel.size.y = (this.itemsSize.y * (Math.floor((this.items.length - 1) / itemsPerLine) + 1));\r\n\t\t\tthis.panel.updateSize();\r\n\r\n\t\t\tthis.panel.position.set(this.itemsSize.x, 0);\r\n\t\t\tthis.panel.updatePosition();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update drawer items position and size.\r\n\t\t *\r\n\t\t * Should be called after change in items displacement variables).\r\n\t\t *\r\n\t\t * @method updateItems\r\n\t\t */\r\n\t\tupdateItems : function()\t{\r\n\t\t\tthis.updatePanelSize();\r\n\r\n\t\t\tvar itemsPerLine = (this.items.length < this.itemsPerLine) ? this.items.length : this.itemsPerLine;\r\n\r\n\t\t\tfor(var i = 0; i < this.items.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.items[i].size.set(this.itemsSize.x, this.itemsSize.y);\r\n\t\t\t\tthis.items[i].position.x = this.itemsSize.x * (i % itemsPerLine);\r\n\t\t\t\tthis.items[i].position.y = this.itemsSize.y * Math.floor(i / itemsPerLine);\r\n\t\t\t\tthis.items[i].updateInterface();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateVisibility : function()\t{\r\n\t\t\tthis._elm.style.display = this.visible ? \"block\" : \"none\";\r\n\t\t},\r\n\r\n\r\n\t\toptionsSize : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this.itemsSize;\r\n\t\t\t},\r\n\r\n\t\t\tset : function(v) {\r\n\t\t\t\tthis.itemsSize = v\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\toptionsPerLine : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this.itemsPerLine;\r\n\t\t\t},\r\n\r\n\t\t\tset : function(v) {\r\n\t\t\t\tthis.itemsPerLine = v\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t\r\n\tButtonDrawer.prototype.addOption = ButtonDrawer.prototype.addItem;\r\n\tButtonDrawer.prototype.insertOption = ButtonDrawer.prototype.insertItem;\r\n\tButtonDrawer.prototype.updateOptions = ButtonDrawer.prototype.updateItems;\r\n\tButtonDrawer.prototype.removeOption = ButtonDrawer.prototype.reomveItem;\r\n\r\n\r\n\treturn actions.buttons.ButtonDrawer = ButtonDrawer;\r\n});\ndefine('skylark-widgets-actions/buttons/ButtonImageToggle',[\r\n\t\"../actions\",\r\n\t\"./ButtonImage\"\r\n],function(actions,ButtonImage){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * A image button that can be toggled.\r\n\t * \r\n\t * @class ButtonImageToggle\r\n\t * @extends {ButtonImage}\r\n\t * @param {Element} parent Parent element.\r\n\t */\r\n\tvar ButtonImageToggle = ButtonImage.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonImage.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\tvar skin = this.getSkin();\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.buttonColor;\r\n\r\n\t\t\tthis.selected = false;\r\n\r\n\t\t\t//Click event\r\n\t\t\tvar self = this;\r\n\t\t\tthis._elm.onclick = function()\r\n\t\t\t{\r\n\t\t\t\tself.selected = !self.selected;\r\n\t\t\t};\r\n\r\n\t\t\t//Mouse over and mouse out events\r\n\t\t\tthis._elm.onmouseenter = function() {\r\n\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonOverColor;\r\n\t\t\t\tself.element.style.backgroundColor = skin.buttonOverColor;\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function() {\r\n\t\t\t\tif(!self.selected) {\r\n\t\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\t\t\tself.element.style.backgroundColor = skin.buttonColor;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set the seleted state of the toggle button.\r\n\t\t * \r\n\t\t * @method setSelected\r\n\t\t * @param {Boolean} selected\r\n\t\t */\r\n\t\tsetSelected : function(selected) {\r\n\t\t\tthis.selected = selected;\r\n\t\t\tvar skin = this.getSkin();\r\n\t\t\t//this._elm.style.backgroundColor = this.selected ? Editor.theme.buttonOverColor : Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.backgroundColor = this.selected ? skin.buttonOverColor : skin.buttonColor;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set button callback function.\r\n\t\t *\r\n\t\t * @method setOnClick\r\n\t\t */\r\n\t\tsetOnClick : function(callback) {\r\n\t\t\tvar self = this;\r\n\t\t\tthis._elm.onclick = function() \t{\r\n\t\t\t\tself.selected = !self.selected;\r\n\t\t\t\tcallback();\t\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\treturn actions.buttons.ButtonImageToggle = ButtonImageToggle;\r\n});\ndefine('skylark-widgets-actions/buttons/ButtonText',[\r\n\t\"skylark-widgets-base/mixins/TextMixin\",\r\n\t\"../actions\",\r\n\t\"./Button\",\r\n],function(TextMixin,actions,Button){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with text, inherits all methods available on the Text class.\r\n\t * \r\n\t * Used in menu bars, panels, etc.\r\n\t *\r\n\t * @class ButtonText\r\n\t * @extends {Button, Text}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\tvar ButtonText = Button.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButton.prototype._construct.call(this, parent);\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t//Span\r\n\t\t\tthis.span = document.createElement(\"span\");\r\n\t\t\tthis.span.style.overflow = \"hidden\";\r\n\t\t\tthis._elm.appendChild(this.span);\r\n\r\n\t\t\t//Text\r\n\t\t\tthis.text = document.createTextNode(\"\");\r\n\t\t\tthis.span.appendChild(this.text);\r\n\r\n\r\n\t\t\t//this.setColor(Editor.theme.buttonColor, Editor.theme.buttonOverColor);\r\n\t\t\tthis.setColor(skin.buttonColor, skin.buttonOverColor);\r\n\t\t\tthis.allowWordBreak(false);\r\n\t\t\tthis.setVerticalAlignment(TextMixin.CENTER);\r\n\t\t\tthis.setAlignment(TextMixin.CENTER);\r\n\t\t\t*/\r\n\r\n\t\t\tthis._buildText();\r\n\r\n\t\t\t//this.setColor(Editor.theme.buttonColor, Editor.theme.buttonOverColor);\r\n\t\t\tthis.setColor(skin.buttonColor, skin.buttonOverColor);\r\n\r\n\t\t},\r\n\t\t...TextMixin\r\n\t});\r\n\t\r\n\r\n\treturn actions.buttons.ButtonText = ButtonText;\r\n});\r\n\ndefine('skylark-widgets-actions/menus/ButtonMenu',[\r\n\t\"../actions\",\r\n\t\"../buttons/ButtonText\"\r\n],function(actions,ButtonText){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button used in dropdown menus, context menus, etc.\r\n\t * \r\n\t * The button has text and its possible to add a icon.\r\n\t *\r\n\t * @class ButtonMenu\r\n\t * @extends {ButtonText}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\tvar ButtonMenu = ButtonText.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonText.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis.span.style.textIndent = \"25px\";\r\n\r\n\t\t\t/**\r\n\t\t\t * Icon element.\r\n\t\t\t *\r\n\t\t\t * @attribute icon\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.icon = null;\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\t//this.setColor(Editor.theme.buttonColor, Editor.theme.buttonOverColor);\r\n\t\t\tthis.setColor(skin.buttonColor, skin.buttonOverColor);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set button icon image URL.\r\n\t\t *\r\n\t\t * Creates the element if it still doesnt exist.\r\n\t\t *\r\n\t\t * @method setIcon\r\n\t\t * @param {String} icon Image URL.\r\n\t\t */\r\n\t\tsetIcon : function(icon) \t{\r\n\t\t\tif(this.icon === null) \t{\r\n\t\t\t\tthis.icon = document.createElement(\"img\");\r\n\t\t\t\tthis.icon.style.position = \"absolute\";\r\n\t\t\t\tthis.icon.style.display = \"block\";\r\n\t\t\t\tthis.icon.style.left = \"5px\";\r\n\t\t\t\tthis.icon.style.top = \"3px\";\r\n\t\t\t\tthis.icon.style.width = \"12px\";\r\n\t\t\t\tthis.icon.style.height = \"12px\";\r\n\t\t\t\tthis._elm.appendChild(this.icon);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.icon.src = icon;\r\n\t\t}\r\n\t});\r\n\treturn actions.buttons.ButtonMenu = ButtonMenu;\r\n});\ndefine('skylark-widgets-actions/menus/DropdownMenu',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"skylark-domx-geom\",\r\n\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"skylark-widgets-base/mixins/TextMixin\",\r\n\r\n\t\"./ButtonMenu\"\r\n],function(\r\n\tVector2,\r\n\tgeom,\r\n\t\r\n\tWidget,\r\n\tTextMixin,\r\n\r\n\tButtonMenu\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Dropdown menu element, used to create dropdowns in menu bars and in context menus.\r\n\t * \r\n\t * @class DropdownMenu\r\n\t * @extends {Text}\r\n\t * @param {Widget} parent Parent widget. \r\n\t */\r\n\r\n\r\n\tvar DropdownMenu = Widget.inherit({\r\n\t\t...TextMixin,\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.cursor = \"pointer\";\r\n\t\t\tthis._elm.style.pointerEvents = \"auto\";\r\n\r\n\t\t\tthis._buildText();\r\n\r\n\t\t\tthis.preventDragEvents();\r\n\r\n\t\t\t/**\r\n\t\t\t * Panel element, where the items are stored.\r\n\t\t\t *\r\n\t\t\t * This DOM element is added directly to the parent DOM element.\r\n\t\t\t *\r\n\t\t\t * @attribute panel\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.panel = new Widget(parent, \"div\");\r\n\t\t\tthis.panel._elm.style.overflow = \"visible\";\r\n\t\t\tthis.panel._elm.style.display = \"none\";\r\n\t\t\tthis.panel._elm.style.zIndex = \"300\";\r\n\r\n\t\t\t/**\r\n\t\t\t * Item icon image, the element is only created when a icon is set.\r\n\t\t\t *\r\n\t\t\t * @attribute icon\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.icon = null;\r\n\r\n\t\t\t/**\r\n\t\t\t * Decorative arrow.\r\n\t\t\t *\r\n\t\t\t * @attribute arrow\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.arrow = document.createElement(\"img\");\r\n\t\t\tthis.arrow.style.display = \"none\";\r\n\t\t\tthis.arrow.style.position = \"absolute\";\r\n\t\t\tthis.arrow.style.right = \"5px\";\r\n\t\t\tthis.arrow.style.top = \"3px\";\r\n\t\t\tthis.arrow.style.width = \"12px\";\r\n\t\t\tthis.arrow.style.height = \"12px\";\r\n\t\t\t//this.arrow.src = Global.FILE_PATH + \"icons/misc/arrow_right.png\";\r\n\t\t\tthis.arrow.src = skin.arrowRightImageUrl;\r\n\t\t\tthis._elm.appendChild(this.arrow);\t\r\n\r\n\t\t\t/**\r\n\t\t\t * Direction to open the dropdown.\r\n\t\t\t *\r\n\t\t\t * @attribute direction\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.direction = DropdownMenu.DOWN;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Indicates if the dropdown menu is expanded.\r\n\t\t\t *\r\n\t\t\t * @attribute expanded\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.expanded = false;\r\n\t\t\tthis.itemsSize = new Vector2(150, 20);\r\n\r\n\t\t\t/**\r\n\t\t\t * Items available in the dropdown.\r\n\t\t\t *\r\n\t\t\t * Items are stored as: {button:button, value:object, name:string}\r\n\t\t\t *\r\n\t\t\t * @attribute items\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.items = [];\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t\t//self._elm.style.backgroundColor = Editor.theme.buttonOverColor;\r\n\t\t\t\tself._elm.style.backgroundColor = skin.buttonOverColor;\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t\t//self._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\t\tself._elm.style.backgroundColor = skin.buttonColor;\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tthis.panel._elm.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\r\n\t\t\tthis.panel._elm.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set location to where items should open.\r\n\t\t *\r\n\t\t * @method setDirection\r\n\t\t */\r\n\t\tsetDirection : function(location) {\r\n\t\t\tthis.direction = location;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Show arrow.\r\n\t\t *\r\n\t\t * @method showArrow\r\n\t\t */\r\n\t\tshowArrow : function() {\r\n\t\t\tthis.arrow.style.display = \"block\";\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set icon.\r\n\t\t *\r\n\t\t * @method setIcon\r\n\t\t * @param {String} icon Image URL.\r\n\t\t */\r\n\t\tsetIcon : function(icon) {\r\n\t\t\tif(this.icon === null) {\r\n\t\t\t\tthis.icon = document.createElement(\"img\");\r\n\t\t\t\tthis.icon.style.display = \"block\";\r\n\t\t\t\tthis.icon.style.position = \"absolute\";\r\n\t\t\t\tthis.icon.style.left = \"5px\";\r\n\t\t\t\tthis.icon.style.top = \"3px\";\r\n\t\t\t\tthis.icon.style.width = \"12px\";\r\n\t\t\t\tthis.icon.style.height = \"12px\";\r\n\t\t\t\tthis._elm.appendChild(this.icon);\r\n\t\t\t}\r\n\r\n\t\t\tthis.icon.src = icon;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove item from menu.\r\n\t\t *\r\n\t\t * @method removeItem\r\n\t\t * @param {Number} index\r\n\t\t */\r\n\t\tremoveItem : function(index) {\r\n\t\t\tif(index >= 0 && index < this.items.length) {\r\n\t\t\t\tthis.items[index].destroy();\r\n\t\t\t\tthis.items.splice(index, 1);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add new item to menu\r\n\t\t *\r\n\t\t * @method addItem\r\n\t\t * @param {String} name of the item\r\n\t\t * @param {Function} callback Callback function\r\n\t\t * @param {String} icon Icon URL.\r\n\t\t * @return {ButtonMenu} Button created for the new item.\r\n\t\t */\r\n\t\taddItem : function(name, callback, icon) {\r\n\t\t\tvar button = new ButtonMenu(this.panel);\r\n\t\t\tbutton._elm.style.zIndex = \"200\";\r\n\t\t\tbutton.setText(name);\r\n\t\t\tbutton.setAlignment(TextMixin.LEFT);\r\n\t\t\tbutton.position.set(25, 0);\r\n\r\n\t\t\tvar self = this;\r\n\t\t\tbutton.setOnClick(function(){\r\n\t\t\t\tcallback();\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t});\r\n\r\n\t\t\tif(icon !== undefined) \t{\r\n\t\t\t\tbutton.setIcon(icon);\r\n\t\t\t}\r\n\r\n\t\t\tthis.items.push(button);\r\n\r\n\t\t\treturn button;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add new menu to menu.\r\n\t\t *\r\n\t\t * @method addItem\r\n\t\t * @param {String} name Name of the item.\r\n\t\t * @param {String} icon Optional icon, image URL.\r\n\t\t * @return {DropdownMenu} The new menu created.\r\n\t\t */\r\n\t\taddMenu : function(name, icon) {\r\n\t\t\tvar menu = new DropdownMenu(this.panel);\r\n\t\t\tmenu.setText(name);\r\n\t\t\tmenu.setDirection(DropdownMenu.LEFT);\r\n\t\t\tmenu.showArrow();\r\n\t\t\tmenu.setAlignment(TextMixin.LEFT);\r\n\t\t\tmenu.setMargin(25);\r\n\t\t\t\r\n\t\t\tif(icon !== undefined)\r\n\t\t\t{\r\n\t\t\t\tmenu.setIcon(icon);\r\n\t\t\t}\r\n\r\n\t\t\tthis.items.push(menu);\r\n\r\n\t\t\treturn menu;\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Update expanded state, position all items in this dropdown.\r\n\t\t * \r\n\t\t * @method setExpanded\r\n\t\t * @param {Boolean} expanded If true the menu will be expanded.\r\n\t\t */\r\n\t\tsetExpanded : function(expanded){\r\n\t\t\tthis.expanded = expanded;\r\n\r\n\t\t\tif(this.expanded) {\r\n\t\t\t\tthis.panel._elm.style.display = \"block\";\r\n\r\n\t\t\t\tif(this.direction === DropdownMenu.DOWN){\r\n\t\t\t\t\tthis.panel._elm.style.top = (this.position.y + this.size.y) + \"px\";\r\n\t\t\t\t\tthis.panel._elm.style.left = this.position.x + \"px\";\r\n\r\n\t\t\t\t\t//var out = DOMUtils.checkBorder(this.panel);\r\n\t\t\t\t\tvar out = geom.testAxis(this.panel);\r\n\r\n\t\t\t\t\tif(out.y !== 0)\t{\r\n\t\t\t\t\t\tthis.panel._elm.style.top = null;\r\n\t\t\t\t\t\tthis.panel._elm.style.bottom = (this.position.y + this.size.y) + \"px\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(out.x !== 0)\t{\r\n\t\t\t\t\t\tthis.panel._elm.style.left = (this.position.x - out.x) + \"px\"; \r\n\t\t\t\t\t}\r\n\t\t\t\t} else if(this.direction === DropdownMenu.UP){\r\n\t\t\t\t\tthis.panel._elm.style.bottom = (this.position.y + this.size.y) + \"px\";\r\n\t\t\t\t\tthis.panel._elm.style.left = this.position.x + \"px\";\r\n\r\n\t\t\t\t\t//var out = DOMUtils.checkBorder(this.panel);\r\n\t\t\t\t\tvar out = geom.testAxis(this.panel);\r\n\t\t\t\t\tif(out.y !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.panel._elm.style.bottom = null;\r\n\t\t\t\t\t\tthis.panel._elm.style.top = (this.position.y + this.size.y) + \"px\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(out.x !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.panel._elm.style.left = (this.position.x - out.x) + \"px\"; \r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if(this.direction === DropdownMenu.LEFT)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.panel._elm.style.top = this.position.y + \"px\";\r\n\t\t\t\t\tthis.panel._elm.style.left = (this.position.x + this.size.x) + \"px\";\r\n\r\n\t\t\t\t\t//var out = DOMUtils.checkBorder(this.panel);\r\n\t\t\t\t\tvar out = geom.testAxis(this.panel);\r\n\t\t\t\t\tif(out.x !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.panel._elm.style.left = (this.position.x - this.size.x) + \"px\"; \r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(out.y !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.panel._elm.style.top = (this.position.y - out.y) + \"px\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if(this.direction === DropdownMenu.RIGHT)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.panel._elm.style.top = this.position.y + \"px\";\r\n\t\t\t\t\tthis.panel._elm.style.left = (this.position.x - this.size.x) + \"px\";\r\n\r\n\t\t\t\t\t//var out = DOMUtils.checkBorder(this.panel);\r\n\t\t\t\t\tvar out = geom.testAxis(this.panel);\r\n\t\t\t\t\tif(out.x !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.panel._elm.style.left = (this.position.x + this.size.x) + \"px\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(out.y !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.panel._elm.style.top = (this.position.y - out.y) + \"px\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tthis.panel._elm.style.display = \"none\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update all items in the menu.\r\n\t\t * \r\n\t\t * @method updateItems\r\n\t\t */\r\n\t\tupdateItems : function() {\r\n\t\t\tfor(var i = 0; i < this.items.length; i++) {\r\n\t\t\t\tthis.items[i].size.set(this.itemsSize.x, this.itemsSize.y);\r\n\t\t\t\tthis.items[i].position.set(0, this.itemsSize.y * i);\r\n\t\t\t\tthis.items[i].updateInterface();\r\n\t\t\t}\r\n\r\n\t\t\tthis.panel._elm.style.width = this.size.x + \"px\";\r\n\t\t\tthis.panel._elm.style.height = (this.itemsSize.y * this.items.length) + \"px\";\r\n\t\t},\r\n\r\n\t\tdestroy : function() {\r\n\t\t\tWidget.prototype.destroy.call(this);\r\n\r\n\t\t\tthis.parent.destroy();\r\n\t\t},\r\n\r\n\t\tupdateSize : function() {\r\n\t\t\tTextMixin.updateSize.call(this);\r\n\r\n\t\t\tthis.updateItems();\r\n\t\t}\r\n\r\n\r\n\t});\r\n\r\n\r\n\tDropdownMenu.DOWN = 0;\r\n\tDropdownMenu.UP = 1;\r\n\tDropdownMenu.LEFT = 2;\r\n\tDropdownMenu.RIGHT = 3;\r\n\r\n\r\n\tDropdownMenu.prototype.addOption = DropdownMenu.prototype.addItem;\r\n\tDropdownMenu.prototype.updateOptions = DropdownMenu.prototype.updateItems;\r\n\r\n\r\n\treturn DropdownMenu;\r\n});\ndefine('skylark-widgets-actions/menus/ContextMenu',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"skylark-domx-geom\",\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"../actions\",\r\n\t\"./ButtonMenu\",\r\n\t\"./DropdownMenu\"\r\n],function(\r\n\tVector2,\r\n\tgeom,\r\n\r\n\tWidget,\r\n\tactions,\r\n\tButtonMenu,\r\n\tDropdownMenu\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Context menu widget.\r\n\t * \r\n\t * @class ContextMenu\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\tvar ContextMenu = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\t\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tthis._elm.style.overflow = \"visible\";\r\n\t\t\tthis._elm.style.zIndex = \"300\";\r\n\t\t\tthis._elm.onmouseleave = function()\t{\r\n\t\t\t\tself.destroy();\r\n\t\t\t};\r\n\r\n\t\t\tthis.offset = new Vector2(20, 10);\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Items in this menu.\r\n\t\t\t * \r\n\t\t\t * @attribute items\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.items = [];\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set the text of this context menu.\r\n\t\t * \r\n\t\t * @method setText\r\n\t\t * @param {String} text\r\n\t\t */\r\n\t\tsetText : function(text) {\r\n\t\t\tthis.text.setText(text);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove item from context menu.\r\n\t\t *\r\n\t\t * @method removeItem\r\n\t\t * @param {Number} index\r\n\t\t */\r\n\t\tremoveItem : function(index) {\r\n\t\t\tif(index >= 0 && index < this.items.length)\t{\r\n\t\t\t\tthis.items[index].destroy();\r\n\t\t\t\tthis.items.splice(index, 1);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add new item to context menu\r\n\t\t *\r\n\t\t * @method addItem\r\n\t\t * @param {String} name of the item\r\n\t\t * @param {Function} callback Callback function\r\n\t\t */\r\n\t\taddItem : function(name, callback) {\r\n\t\t\tvar button = new ButtonMenu(this);\r\n\t\t\tbutton._elm.style.zIndex = \"10000\";\r\n\t\t\tbutton.setText(name);\r\n\t\t\tbutton.setAlignment(Text.LEFT);\r\n\t\t\tbutton.position.x = 25;\r\n\r\n\t\t\tvar self = this;\r\n\t\t\tbutton.setOnClick(function(){\r\n\t\t\t\tcallback();\r\n\t\t\t\tself.destroy();\r\n\t\t\t});\r\n\r\n\t\t\tthis.items.push(button);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add new menu to context menu\r\n\t\t *\r\n\t\t * @method addItem\r\n\t\t * @param {String} name of the item.\r\n\t\t * @return {DropdownMenu} The new menu created.\r\n\t\t */\r\n\t\taddMenu : function(name) {\r\n\t\t\tvar menu = new DropdownMenu(this);\r\n\t\t\tmenu.setText(name);\r\n\t\t\tmenu.setDirection(DropdownMenu.LEFT);\r\n\t\t\tmenu.showArrow();\r\n\t\t\tmenu.setAlignment(Text.LEFT);\r\n\t\t\tmenu.setMargin(25);\r\n\r\n\t\t\tthis.items.push(menu);\r\n\r\n\t\t\treturn menu;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update all items in the menu.\r\n\t\t * \r\n\t\t * @method updateItems\r\n\t\t */\r\n\t\tupdateItems : function() {\r\n\t\t\tfor(var i = 0; i < this.items.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.items[i].size.copy(this.size);\r\n\t\t\t\tthis.items[i].position.set(0, this.size.y * i);\r\n\t\t\t\tthis.items[i].updateInterface();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateSize : function()\t{\r\n\t\t\tthis._elm.style.width = this.size.x + \"px\";\r\n\t\t\tthis._elm.style.height = (this.size.y * this.items.length) + \"px\";\r\n\r\n\t\t\tthis.updateItems();\r\n\t\t},\r\n\r\n\t\tupdatePosition : function() {\r\n\t\t\tthis._elm.style.top = (this.position.y - this.offset.y) + \"px\";\r\n\t\t\tthis._elm.style.left = (this.position.x - this.offset.x) + \"px\";\r\n\r\n\t\t\t//Check if its inside window\r\n\t\t\t\r\n\t\t\t//var out = DOMUtils.checkBorder(this._elm);\r\n\t\t\tvar out = geom.testAxis(this._elm);\r\n\t\t\tif(out.x !== 0)\r\n\t\t\t{\r\n\t\t\t\tthis._elm.style.left = (this.position.x + this.offset.x - this.size.x) + \"px\"; \r\n\t\t\t}\r\n\t\t\tif(out.y !== 0)\r\n\t\t\t{\r\n\t\t\t\tthis._elm.style.top = (this.position.y - this.offset.y - out.y) + \"px\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t});\r\n\r\n\treturn actions.menus.ContextMenu = ContextMenu;\r\n});\ndefine('skylark-widgets-actions/main',[\r\n\t\"./actions\",\r\n\t\"./buttons/Button\",\r\n\t\"./buttons/ButtonDrawer\",\r\n\t\"./buttons/ButtonImage\",\r\n\t\"./buttons/ButtonImageToggle\",\r\n\t\"./buttons/ButtonText\",\r\n\t\"./menus/ButtonMenu\",\r\n\t\"./menus/ContextMenu\",\r\n\t\"./menus/DropdownMenu\"\r\n],function(texts){\r\n\treturn actions;\r\n});\ndefine('skylark-widgets-actions', ['skylark-widgets-actions/main'], function (main) { return main; });\n\n"]}