{"version":3,"sources":["skylark-widgets-actions.js"],"names":["define","skylark","attach","buttons","menus","Widget","actions","Button","inherit","_construct","parent","prototype","call","this","_elm","style","cursor","preventDragEvents","setColor","baseColor","overColor","backgroundColor","onmouseenter","onmouseleave","setStyles","baseStyle","overStyle","i","Vector2","ImageMixin","_buildImage","icon","document","createElement","pointerEvents","position","top","left","width","height","appendChild","setImage","image","src","setImageScale","x","y","ButtonImage","Editor","theme","buttonOverColor","Element","ButtonDrawer","zIndex","buttonColor","overflow","panel","element","barColor","options","optionsPerLine","optionsSize","optionsScale","expanded","setExpanded","self","clear","length","destroy","display","insertOption","attachTo","push","addOption","callback","altText","button","setOnClick","updateInterface","undefined","setAltText","removeOption","index","splice","_updatePanelSize","size","Math","floor","updateSize","set","updatePosition","_updateOptions","updatePanelSize","_updateVisibility","visible","ButtonImageToggle","justifyContent","alignItems","skin","getSkin","selected","onclick","setSelected","TextMixin","_buildText","color","textColor","span","text","createTextNode","fitContent","allowWordBreak","setVerticalAlignment","CENTER","setAlignment","setFont","fontFamily","fontWeight","fontStyle","value","whiteSpace","wordBreak","setText","data","setTextBorder","textShadow","setTextSize","fontSize","setTextColor","setOverflow","ELLIPSIS","textOverflow","align","textAlign","LEFT","RIGHT","TOP","BOTTOM","measure","offsetWidth","offsetHeight","setMargin","margin","clientWidth","clientHeight","CLIP","ButtonText","_buildTextSpan","ButtonMenu","textIndent","setIcon","geom","DropdownMenu","arrow","right","direction","DOWN","setDirection","location","showArrow","name","Text","addMenu","menu","out","testAsis","bottom","UP","updateOptions","ContextMenu","offset","copy","testAxis","texts","main"],"mappings":"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","file":"../skylark-widgets-actions.js","sourcesContent":["define('skylark-widgets-actions/actions',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark) {\r\n\tvar actions = {\r\n\t\tbuttons : {},\r\n\t\tmenus : {}\r\n\t};\r\n\r\n\treturn skylark.attach(\"widgets.actions\",actions);\r\n\r\n});\r\n\r\n\ndefine('skylark-widgets-actions/buttons/Button',[\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"../actions\"\t\r\n],function(Widget,actions){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Base button class.\r\n\t * \r\n\t * @class Button\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar Button = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tthis._elm.style.cursor = \"pointer\";\r\n\r\n\t\t\tthis.preventDragEvents();\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set button color.\r\n\t\t * \r\n\t\t * When mouse is over the button uses the overColor, when the mouse gets outside of the button it uses the base color.\r\n\t\t * \r\n\t\t * @method setColor\r\n\t\t * @param {String} baseColor CSS color for the button background.\r\n\t\t * @param {String} overColor CSS color for the button when mouse is over it.\r\n\t\t */\r\n\t\tsetColor : function(baseColor, overColor){\r\n\t\t\tthis._elm.style.backgroundColor = baseColor;\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\t{\r\n\t\t\t\tthis.style.backgroundColor = overColor;\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function()\t{\r\n\t\t\t\tthis.style.backgroundColor = baseColor;\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set button styles, the style can be descriped in a object.\r\n\t\t *\r\n\t\t * Here is an exaple of a style object:\r\n\t\t * {\r\n\t\t * backgroundColor: \"#FF0000\",\r\n\t\t * color: \"#FFFFFF\"\r\n\t\t * }\r\n\t\t *\r\n\t\t * @method setColor\r\n\t\t * @param {Object} baseStyle Object with the style to be applied as base.\r\n\t\t * @param {Object} overStyle Object with the style to be applied when mouse is over.\r\n\t\t */\r\n\t\tsetStyles : function(baseStyle, overStyle)\t{\r\n\t\t\tfor(var i in baseStyle)\r\n\t\t\t{\r\n\t\t\t\tthis._elm.style[i] = baseStyle[i];\r\n\t\t\t}\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\t{\r\n\t\t\t\tfor(var i in overStyle)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.style[i] = overStyle[i];\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function()\t{\r\n\t\t\t\tfor(var i in baseStyle)\t{\r\n\t\t\t\t\tthis.style[i] = baseStyle[i];\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\treturn actions.buttons.Button = Button;\r\n});\ndefine('skylark-widgets-base/mixins/ImageMixin',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"../Widget\"\r\n],function(\r\n\tVector2,\r\n\tWidget\r\n){\r\n\t\"use strict\";\r\n\r\n\tvar ImageMixin = {\r\n\t\t_buildImage : function (parent) {\r\n\t\t\t/**\r\n\t\t\t * Button icon.\r\n\t\t\t * \r\n\t\t\t * @attribute icon\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.icon = document.createElement(\"img\");\r\n\t\t\tthis.icon.style.pointerEvents = \"none\";\r\n\t\t\tthis.icon.style.position = \"absolute\";\r\n\t\t\tthis.icon.style.top = \"15%\";\r\n\t\t\tthis.icon.style.left = \"15%\";\r\n\t\t\tthis.icon.style.width = \"70%\";\r\n\t\t\tthis.icon.style.height = \"70%\";\r\n\t\t\tthis._elm.appendChild(this.icon);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set button drawer icon.\r\n\t\t *\r\n\t\t * @method setImage\r\n\t\t * @param {String} image Image URL.\r\n\t\t */\r\n\t\tsetImage : function(image) {\r\n\t\t\tthis.icon.src = image;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set icon scale, the icon will be centered.\r\n\t\t *\r\n\t\t * @method setImageScale\r\n\t\t */\r\n\t\tsetImageScale : function(x, y){\r\n\t\t\tthis.icon.style.top = ((1 - y) / 2 * 100) + \"%\";\r\n\t\t\tthis.icon.style.left = ((1 - x) / 2 * 100) + \"%\";\r\n\t\t\tthis.icon.style.width = (x * 100) + \"%\";\r\n\t\t\tthis.icon.style.height = (y * 100) + \"%\";\r\n\t\t}\r\n\r\n\t};\r\n\r\n\treturn ImageMixin;\r\n});\ndefine('skylark-widgets-actions/buttons/ButtonImage',[\r\n\t\"skylark-widgets-base/mixins/ImageMixin\",\r\n\t\"../actions\",\r\n\t\"./Button\"\r\n],function(ImageMixin,actions,Button){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with a centered icon.\r\n\t *\r\n\t * @class ButtonImageToggle\r\n\t * @extends {Button}\r\n\t * @param {Element} parent Parent element.\r\n\t */\r\n\tvar ButtonImage = Button.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButton.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis._buildImage();\r\n\t\t\tthis.setColor(null, Editor.theme.buttonOverColor);\r\n\t\t},\r\n\r\n\t\t...ImageMixin\r\n\r\n\t});\r\n\r\n\treturn actions.buttons.ButtonImage = ButtonImage;\r\n});\ndefine('skylark-widgets-actions/buttons/ButtonDrawer',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./ButtonImage\"\r\n],function(\r\n\tVector2,\r\n\tElement,\r\n\tButtonImage\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with text, inherits all methods available on the Text class.\r\n\t * \r\n\t * Used in menu bars, panels, etc.\r\n\t *\r\n\t * @class ButtonDrawer\r\n\t * @extends {ButtonImage}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar ButtonDrawer = ButtonImage.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonImage.prototype._construct.call(this, parent);\r\n\r\n\r\n\t\t\tthis._elm.style.zIndex = \"200\";\r\n\t\t\tthis._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.overflow = \"visible\";\r\n\r\n\t\t\tthis.panel = new Widget(this, \"div\");\r\n\t\t\tthis.panel.element.style.overflow = \"visible\";\r\n\t\t\tthis.panel.element.style.backgroundColor = Editor.theme.barColor;\r\n\t\t\tthis.panel.element.style.zIndex = \"250\";\r\n\r\n\t\t\t/** \r\n\t\t\t * List of the options in this panel.\r\n\t\t\t *\r\n\t\t\t * @attribute options\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.options = [];\r\n\r\n\t\t\t/**\r\n\t\t\t * Number of maximum options per row\r\n\t\t\t *\r\n\t\t\t * @attribute optionsPerLine\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.optionsPerLine = 3;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Size of each option, also affects the size of the panel.\r\n\t\t\t *\r\n\t\t\t * @attribute optionsSize\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.optionsSize = new Vector2(40, 40);\r\n\r\n\t\t\t/**\r\n\t\t\t * Scale of the inner icon of the options created from the addOption() method.\r\n\t\t\t *\r\n\t\t\t * @attribute optionsScale\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.optionsScale = new Vector2(0.7, 0.7);\r\n\r\n\t\t\t/**\r\n\t\t\t * Indicates if the button drawer panel is visible.\r\n\t\t\t *\r\n\t\t\t * @attribute expanded\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.expanded = false;\r\n\t\t\tthis.setExpanded(false);\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\tself.element.style.backgroundColor = Editor.theme.buttonOverColor;\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis._elm.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\tself.element.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\r\n\t\t\tthis.panel.element.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis.panel.element.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\t\t},\r\n\r\n\r\n\t\tclear : function(){\r\n\t\t\tfor(var i = 0; i < this.options.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.options[i].destroy();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.options = [];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Expand or close the button drawer panel.\r\n\t\t *\r\n\t\t * @method setExpanded\r\n\t\t * @param {Boolean} expanded\r\n\t\t */\r\n\t\tsetExpanded : function(expanded){\r\n\t\t\tthis.expanded = expanded;\r\n\t\t\tthis.panel.element.style.display = this.expanded ? \"block\" : \"none\";\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Insert new option from already created element.\r\n\t\t *\r\n\t\t * @method insertOption\r\n\t\t * @param {Widget} Widget of the option to be inserted in the drawer\r\n\t\t */\r\n\t\tinsertOption : function(element){\r\n\t\t\telement.attachTo(this.panel);\r\n\t\t\tthis.options.push(element);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Add new option to the menu.\r\n\t\t * \r\n\t\t * @method addOption\r\n\t\t * @param {String} image\r\n\t\t * @param {Function} callback\r\n\t\t * @param {String} altText\r\n\t\t */\r\n\t\taddOption : function(image, callback, altText){\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tvar button = new ButtonImage(this.panel);\r\n\t\t\tbutton.setImage(image);\r\n\t\t\tbutton.setOnClick(function()\r\n\t\t\t{\r\n\t\t\t\tcallback();\r\n\t\t\t\tself.expanded = false;\r\n\t\t\t\tself.updateInterface();\r\n\t\t\t});\r\n\r\n\t\t\tif(altText !== undefined)\r\n\t\t\t{\r\n\t\t\t\tbutton.setAltText(altText);\r\n\t\t\t}\r\n\r\n\t\t\tthis.options.push(button);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove an option from the menu.\r\n\t\t *\r\n\t\t * @method removeOption\r\n\t\t * @param {Number} index\r\n\t\t */\r\n\t\tremoveOption : function(index) \t{\r\n\t\t\tif(index >= 0 && index < this.options.length)\r\n\t\t\t{\r\n\t\t\t\tthis.options[index].destroy();\r\n\t\t\t\tthis.options.splice(index, 1);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Updates drawer panel size based on the number of options available.\r\n\t\t * \r\n\t\t * @method updatePanelSize\r\n\t\t */\r\n\t\t_updatePanelSize : function()\t{\r\n\t\t\tvar optionsPerLine = (this.options.length < this.optionsPerLine) ? this.options.length : this.optionsPerLine;\r\n\r\n\t\t\tthis.panel.size.x = (this.optionsSize.x * optionsPerLine);\r\n\t\t\tthis.panel.size.y = (this.optionsSize.y * (Math.floor((this.options.length - 1) / optionsPerLine) + 1));\r\n\t\t\tthis.panel.updateSize();\r\n\r\n\t\t\tthis.panel.position.set(this.optionsSize.x, 0);\r\n\t\t\tthis.panel.updatePosition();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update drawer options position and size.\r\n\t\t *\r\n\t\t * Should be called after change in options displacement variables).\r\n\t\t *\r\n\t\t * @method updateOptions\r\n\t\t */\r\n\t\t_updateOptions : function()\t{\r\n\t\t\tthis.updatePanelSize();\r\n\r\n\t\t\tvar optionsPerLine = (this.options.length < this.optionsPerLine) ? this.options.length : this.optionsPerLine;\r\n\r\n\t\t\tfor(var i = 0; i < this.options.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.options[i].size.set(this.optionsSize.x, this.optionsSize.y);\r\n\t\t\t\tthis.options[i].position.x = this.optionsSize.x * (i % optionsPerLine);\r\n\t\t\t\tthis.options[i].position.y = this.optionsSize.y * Math.floor(i / optionsPerLine);\r\n\t\t\t\tthis.options[i].updateInterface();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_updateVisibility : function()\t{\r\n\t\t\tthis._elm.style.display = this.visible ? \"block\" : \"none\";\r\n\t\t}\r\n\t});\r\n\r\n\r\n\treturn actions.buttons.ButtonDrawer = ButtonDrawer;\r\n});\ndefine('skylark-widgets-actions/buttons/ButtonImageToggle',[\r\n\t\"../actions\",\r\n\t\"./ButtonImage\"\r\n],function(actions,ButtonImage){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * A image button that can be toggled.\r\n\t * \r\n\t * @class ButtonImageToggle\r\n\t * @extends {ButtonImage}\r\n\t * @param {Element} parent Parent element.\r\n\t */\r\n\tvar ButtonImageToggle = ButtonImage.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonImage.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\tvar skin = this.getSkin();\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.buttonColor;\r\n\r\n\t\t\tthis.selected = false;\r\n\r\n\t\t\t//Click event\r\n\t\t\tvar self = this;\r\n\t\t\tthis._elm.onclick = function()\r\n\t\t\t{\r\n\t\t\t\tself.selected = !self.selected;\r\n\t\t\t};\r\n\r\n\t\t\t//Mouse over and mouse out events\r\n\t\t\tthis._elm.onmouseenter = function() {\r\n\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonOverColor;\r\n\t\t\t\tself.element.style.backgroundColor = skin.buttonOverColor;\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function() {\r\n\t\t\t\tif(!self.selected) {\r\n\t\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\t\t\tself.element.style.backgroundColor = skin.buttonColor;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set the seleted state of the toggle button.\r\n\t\t * \r\n\t\t * @method setSelected\r\n\t\t * @param {Boolean} selected\r\n\t\t */\r\n\t\tsetSelected : function(selected) {\r\n\t\t\tthis.selected = selected;\r\n\t\t\tvar skin = this.getSkin();\r\n\t\t\t//this._elm.style.backgroundColor = this.selected ? Editor.theme.buttonOverColor : Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.backgroundColor = this.selected ? skin.buttonOverColor : skin.buttonColor;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set button callback function.\r\n\t\t *\r\n\t\t * @method setOnClick\r\n\t\t */\r\n\t\tsetOnClick : function(callback) {\r\n\t\t\tvar self = this;\r\n\t\t\tthis._elm.onclick = function() \t{\r\n\t\t\t\tself.selected = !self.selected;\r\n\t\t\t\tcallback();\t\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\treturn actions.buttons.ButtonImageToggle = ButtonImageToggle;\r\n});\ndefine('skylark-widgets-base/mixins/TextMixin',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"../Widget\"\r\n],function(\r\n\tVector2,\r\n\tWidget\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text element without background.\r\n\t * \r\n\t * @class Text\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\r\n\tvar TextMixin = {\r\n\t\t_buildText : function() {\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.pointerEvents = \"none\";\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\r\n\t\t\t/** \r\n\t\t\t * Span DOM element used to represent the text.\r\n\t\t\t *\r\n\t\t\t * @attribute span\r\n\t\t\t * @type {DOM}\r\n\t\t \t */\r\n\t\t\tthis.span = document.createElement(\"span\");\r\n\t\t\tthis.span.style.overflow = \"hidden\";\r\n\t\t\tthis._elm.appendChild(this.span);\r\n\r\n\t\t\t//Text\r\n\t\t\tthis.text = document.createTextNode(\"\");\r\n\t\t\tthis.span.appendChild(this.text);\r\n\r\n\t\t\t/**\r\n\t\t\t * If set to true the text container will automatically fit the text size.\r\n\t\t\t *\r\n\t\t\t * @attribute fitContent\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.fitContent = false;\r\n\r\n\t\t\tthis.allowWordBreak(false);\r\n\t\t\tthis.setVerticalAlignment(TextMixin.CENTER);\r\n\t\t\tthis.setAlignment(TextMixin.CENTER);\t\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set font to use for the text.\r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {String} fontFamily Font family.\r\n\t\t * @param {Number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {String} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle) {\r\n\t\t\tthis.span.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis.span.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined) {\r\n\t\t\t\tthis.span.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Enable of disable word breaking.\r\n\t\t *\r\n\t\t * @method allowWordBreak\r\n\t\t * @param {Boolean} line If true words can be breaked.\r\n\t\t */\r\n\t\tallowWordBreak : function(value) {\r\n\t\t\tif(value === true) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"normal\";\r\n\t\t\t\tthis.span.style.wordBreak = \"break-word\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.wordBreak = \"normal\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {String} text Text. \r\n\t\t */\r\n\t\tsetText : function(text){\r\n\t\t\tthis.text.data = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text border.\r\n\t\t *\r\n\t\t * @method setTextBorder\r\n\t\t * @param {Number} size Border size in pixels.\r\n\t\t * @param {String} color CSS Color. \r\n\t\t */\r\n\t\tsetTextBorder : function(size, color) {\r\n\t\t\tthis.span.style.textShadow = \"-\" + size + \"px 0 \" + color + \", 0 \" + size + \"px \" + color + \", \" + size + \"px 0 \" + color + \", 0 -\" + size + \"px \" + color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set Text size, in pixels.\r\n\t\t * \r\n\t\t * @method setTextSize\r\n\t\t * @param {Number} size Size in pixel for this text element.\r\n\t\t */\r\n\t\tsetTextSize : function(size) {\r\n\t\t\tthis._elm.style.fontSize = size + \"px\";\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text color.\r\n\t\t * \r\n\t\t * @method setTextColor\r\n\t\t * @param {String} color Color code.\r\n\t\t */\r\n\t\tsetTextColor : function(color) {\r\n\t\t\tthis.span.style.color = color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text overflow handling\r\n\t\t *\r\n\t\t * @method setOverflow\r\n\t\t * @param {Number} overflow\r\n\t\t */\r\n\t\tsetOverflow : function(overflow) {\r\n\t\t\tif(overflow === TextMixin.ELLIPSIS) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"nowrap\";\r\n\t\t\t\tthis.span.style.textOverflow = \"ellipsis\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.textOverflow = \"clip\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text horizontal alignment.\r\n\t\t *  - TextMixin.CENTER\r\n\t\t *  - TextMixin.LEFT\r\n\t\t *  - TextMixin.RIGHT\r\n\t\t * \r\n\t\t * @method setAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetAlignment : function(align) \t{\r\n\t\t\tif(align === TextMixin.CENTER) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\t\tthis._elm.style.textAlign = \"center\";\r\n\t\t\t} else if(align === TextMixin.LEFT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-start\";\r\n\t\t\t\tthis._elm.style.textAlign = \"left\";\r\n\t\t\t} else if(align === TextMixin.RIGHT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-end\";\r\n\t\t\t\tthis._elm.style.textAlign = \"right\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text vertical alignment.\r\n\t\t *  - TextMixin.CENTER\r\n\t\t *  - TextMixin.TOP\r\n\t\t *  - TextMixin.BOTTOM\r\n\t\t * \r\n\t\t * @method setVerticalAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetVerticalAlignment : function(align) {\r\n\t\t\tif(align === TextMixin.CENTER) {\r\n\t\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\t} else if(align === TextMixin.TOP) {\r\n\t\t \t\tthis._elm.style.alignItems = \"flex-start\";\r\n\t\t\t} else if(align === TextMixin.BOTTOM) {\r\n\t\t\t\tthis._elm.style.alignItems = \"flex-end\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get size of the text inside of this component in px.\r\n\t\t * \r\n\t\t * @method measure\r\n\t\t * @return {Vector2} A vector with the size of the text. \r\n\t\t */\r\n\t\tmeasure : function() \t{\r\n\t\t \treturn new Vector2(this.span.offsetWidth, this.span.offsetHeight);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text internal margin in pixels.\r\n\t\t * \r\n\t\t * @method setMargin\r\n\t\t * @param {Number} margin Margin size in pixels.\r\n\t\t */\r\n\t\tsetMargin : function(margin) {\r\n\t\t\tthis.span.style.margin = margin + \"px\";\r\n\t\t},\r\n\r\n\t\tupdateSize : function() {\r\n\t\t\tif(this.fitContent) { \r\n\t\t\t\tthis.size.x = this.span.clientWidth;\r\n\t\t\t\tthis.size.y = this.span.clientHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tWidget.prototype.updateSize.call(this);\r\n\t\t},\r\n\r\n\t\tCENTER : 0,\r\n\t\tLEFT : 1,\r\n\t    RIGHT : 2,\r\n\t    TOP : 3,\r\n\t    BOTTOM : 4,\r\n\r\n\t    CLIP : 10,\r\n\t    ELLIPSIS : 11\r\n\r\n\t};\r\n\r\n\r\n\treturn TextMixin;\r\n});\ndefine('skylark-widgets-actions/buttons/ButtonText',[\n\t\"skylark-widgets-base/mixins/TextMixin\",\n\t\"../actions\",\n\t\"./Button\",\n],function(TextMixin,actions,Button){\n\t\"use strict\";\n\n\t/**\n\t * Button with text, inherits all methods available on the Text class.\n\t * \n\t * Used in menu bars, panels, etc.\n\t *\n\t * @class ButtonText\n\t * @extends {Button, Text}\n\t * @param {Widget} parent Parent widget.\n\t */\n\tvar ButtonText = Button.inherit({\n\n\t\t_construct : function (parent) {\n\t\t\tButton.prototype._construct.call(this, parent);\n\n\t\t\tvar skin = this.getSkin();\n\n\t\t\t/*\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\n\t\t\tthis._elm.style.color = skin.textColor;\n\t\t\tthis._elm.style.display = \"flex\";\n\t\t\t\n\t\t\t//Span\n\t\t\tthis.span = document.createElement(\"span\");\n\t\t\tthis.span.style.overflow = \"hidden\";\n\t\t\tthis._elm.appendChild(this.span);\n\n\t\t\t//Text\n\t\t\tthis.text = document.createTextNode(\"\");\n\t\t\tthis.span.appendChild(this.text);\n\n\n\t\t\t//this.setColor(Editor.theme.buttonColor, Editor.theme.buttonOverColor);\n\t\t\tthis.setColor(skin.buttonColor, skin.buttonOverColor);\n\t\t\tthis.allowWordBreak(false);\n\t\t\tthis.setVerticalAlignment(TextMixin.CENTER);\n\t\t\tthis.setAlignment(TextMixin.CENTER);\n\t\t\t*/\n\n\t\t\tthis._buildTextSpan();\n\n\t\t\t//this.setColor(Editor.theme.buttonColor, Editor.theme.buttonOverColor);\n\t\t\tthis.setColor(skin.buttonColor, skin.buttonOverColor);\n\n\t\t},\n\t\t...TextMixin\n\t});\n\t\n\n\treturn actions.buttons.ButtonText = ButtonText;\n});\n\ndefine('skylark-widgets-actions/menus/ButtonMenu',[\r\n\t\"../actions\",\r\n\t\"../buttons/ButtonText\"\r\n],function(actions,ButtonText){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button used in dropdown menus, context menus, etc.\r\n\t * \r\n\t * The button has text and its possible to add a icon.\r\n\t *\r\n\t * @class ButtonMenu\r\n\t * @extends {ButtonText}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\tvar ButtonMenu = ButtonText.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonText.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis.span.style.textIndent = \"25px\";\r\n\r\n\t\t\t/**\r\n\t\t\t * Icon element.\r\n\t\t\t *\r\n\t\t\t * @attribute icon\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.icon = null;\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\t//this.setColor(Editor.theme.buttonColor, Editor.theme.buttonOverColor);\r\n\t\t\tthis.setColor(skin.buttonColor, skin.buttonOverColor);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set button icon image URL.\r\n\t\t *\r\n\t\t * Creates the element if it still doesnt exist.\r\n\t\t *\r\n\t\t * @method setIcon\r\n\t\t * @param {String} icon Image URL.\r\n\t\t */\r\n\t\tsetIcon : function(icon) \t{\r\n\t\t\tif(this.icon === null) \t{\r\n\t\t\t\tthis.icon = document.createElement(\"img\");\r\n\t\t\t\tthis.icon.style.position = \"absolute\";\r\n\t\t\t\tthis.icon.style.display = \"block\";\r\n\t\t\t\tthis.icon.style.left = \"5px\";\r\n\t\t\t\tthis.icon.style.top = \"3px\";\r\n\t\t\t\tthis.icon.style.width = \"12px\";\r\n\t\t\t\tthis.icon.style.height = \"12px\";\r\n\t\t\t\tthis._elm.appendChild(this.icon);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.icon.src = icon;\r\n\t\t}\r\n\t});\r\n\treturn actions.buttons.ButtonMenu = ButtonMenu;\r\n});\ndefine('skylark-widgets-actions/menus/DropdownMenu',[\n\t\"skylark-langx-numerics/Vector2\",\n\t\"skylark-domx-geom\",\n\n\t\"skylark-widgets-base/Widget\",\n\t\"skylark-widgets-base/mixins/TextMixin\",\n\n\t\"./ButtonMenu\"\n],function(\n\tVector2,\n\tgeom,\n\t\n\tWidget,\n\tTextMixin,\n\n\tButtonMenu\n){\n\t\"use strict\";\n\n\t/**\n\t * Dropdown menu element, used to create dropdowns in menu bars and in context menus.\n\t * \n\t * @class DropdownMenu\n\t * @extends {Text}\n\t * @param {Widget} parent Parent widget. \n\t */\n\n\n\tvar DropdownMenu = Widget.inherit({\n\n\t\t_construct : function (parent) {\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\n\n\t\t\tthis._buildTextSpan();\n\n\n\t\t\tthis._elm.style.backgroundColor = Editor.theme.buttonColor;\n\t\t\tthis._elm.style.cursor = \"pointer\";\n\t\t\tthis._elm.style.pointerEvents = \"auto\";\n\n\t\t\tthis.preventDragEvents();\n\n\t\t\t/**\n\t\t\t * Panel element, where the options are stored.\n\t\t\t *\n\t\t\t * This DOM element is added directly to the parent DOM element.\n\t\t\t *\n\t\t\t * @attribute panel\n\t\t\t * @type {DOM}\n\t\t\t */\n\t\t\tthis.panel = new Widget(parent, \"div\");\n\t\t\tthis.panel._elm.style.overflow = \"visible\";\n\t\t\tthis.panel._elm.style.display = \"none\";\n\t\t\tthis.panel._elm.style.zIndex = \"300\";\n\n\t\t\t/**\n\t\t\t * Option icon image, the element is only created when a icon is set.\n\t\t\t *\n\t\t\t * @attribute icon\n\t\t\t * @type {DOM}\n\t\t\t */\n\t\t\tthis.icon = null;\n\n\t\t\t/**\n\t\t\t * Decorative arrow.\n\t\t\t *\n\t\t\t * @attribute arrow\n\t\t\t * @type {DOM}\n\t\t\t */\n\t\t\tthis.arrow = document.createElement(\"img\");\n\t\t\tthis.arrow.style.display = \"none\";\n\t\t\tthis.arrow.style.position = \"absolute\";\n\t\t\tthis.arrow.style.right = \"5px\";\n\t\t\tthis.arrow.style.top = \"3px\";\n\t\t\tthis.arrow.style.width = \"12px\";\n\t\t\tthis.arrow.style.height = \"12px\";\n\t\t\t//this.arrow.src = Global.FILE_PATH + \"icons/misc/arrow_right.png\";\n\t\t\tthis._elm.appendChild(this.arrow);\n\n\t\t\t/**\n\t\t\t * Direction to open the dropdown.\n\t\t\t *\n\t\t\t * @attribute direction\n\t\t\t * @type {Number}\n\t\t\t */\n\t\t\tthis.direction = DropdownMenu.DOWN;\n\t\t\t\n\t\t\t/**\n\t\t\t * Indicates if the dropdown menu is expanded.\n\t\t\t *\n\t\t\t * @attribute expanded\n\t\t\t * @type {Boolean}\n\t\t\t */\n\t\t\tthis.expanded = false;\n\t\t\tthis.optionsSize = new Vector2(150, 20);\n\n\t\t\t/**\n\t\t\t * Options available in the dropdown.\n\t\t\t *\n\t\t\t * Options are stored as: {button:button, value:object, name:string}\n\t\t\t *\n\t\t\t * @attribute options\n\t\t\t * @type {Array}\n\t\t\t */\n\t\t\tthis.options = [];\n\n\t\t\tvar self = this;\n\n\t\t\tthis._elm.onmouseenter = function()\n\t\t\t{\n\t\t\t\tself.setExpanded(true);\n\t\t\t\tself._elm.style.backgroundColor = Editor.theme.buttonOverColor;\n\t\t\t};\n\n\t\t\tthis._elm.onmouseleave = function()\n\t\t\t{\n\t\t\t\tself.setExpanded(false);\n\t\t\t\tself._elm.style.backgroundColor = Editor.theme.buttonColor;\n\t\t\t};\n\t\t\t\n\t\t\tthis.panel._elm.onmouseenter = function()\n\t\t\t{\n\t\t\t\tself.setExpanded(true);\n\t\t\t};\n\n\t\t\tthis.panel._elm.onmouseleave = function()\n\t\t\t{\n\t\t\t\tself.setExpanded(false);\n\t\t\t};\n\n\t\t},\n\n\t\t/**\n\t\t * Set location to where options should open.\n\t\t *\n\t\t * @method setDirection\n\t\t */\n\t\tsetDirection : function(location) {\n\t\t\tthis.direction = location;\n\t\t},\n\n\t\t/**\n\t\t * Show arrow.\n\t\t *\n\t\t * @method showArrow\n\t\t */\n\t\tshowArrow : function() {\n\t\t\tthis.arrow.style.display = \"block\";\n\t\t},\n\n\t\t/**\n\t\t * Set icon.\n\t\t *\n\t\t * @method setIcon\n\t\t * @param {String} icon Image URL.\n\t\t */\n\t\tsetIcon : function(icon) {\n\t\t\tif(this.icon === null) {\n\t\t\t\tthis.icon = document.createElement(\"img\");\n\t\t\t\tthis.icon.style.display = \"block\";\n\t\t\t\tthis.icon.style.position = \"absolute\";\n\t\t\t\tthis.icon.style.left = \"5px\";\n\t\t\t\tthis.icon.style.top = \"3px\";\n\t\t\t\tthis.icon.style.width = \"12px\";\n\t\t\t\tthis.icon.style.height = \"12px\";\n\t\t\t\tthis._elm.appendChild(this.icon);\n\t\t\t}\n\n\t\t\tthis.icon.src = icon;\n\t\t},\n\n\t\t/**\n\t\t * Remove option from menu.\n\t\t *\n\t\t * @method removeOption\n\t\t * @param {Number} index\n\t\t */\n\t\tremoveOption : function(index) {\n\t\t\tif(index >= 0 && index < this.options.length) {\n\t\t\t\tthis.options[index].destroy();\n\t\t\t\tthis.options.splice(index, 1);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add new option to menu\n\t\t *\n\t\t * @method addOption\n\t\t * @param {String} name of the option\n\t\t * @param {Function} callback Callback function\n\t\t * @param {String} icon Icon URL.\n\t\t * @return {ButtonMenu} Button created for the new option.\n\t\t */\n\t\taddOption : function(name, callback, icon) {\n\t\t\tvar button = new ButtonMenu(this.panel);\n\t\t\tbutton._elm.style.zIndex = \"200\";\n\t\t\tbutton.setText(name);\n\t\t\tbutton.setAlignment(Text.LEFT);\n\t\t\tbutton.position.set(25, 0);\n\n\t\t\tvar self = this;\n\t\t\tbutton.setOnClick(function(){\n\t\t\t\tcallback();\n\t\t\t\tself.setExpanded(false);\n\t\t\t});\n\n\t\t\tif(icon !== undefined) \t{\n\t\t\t\tbutton.setIcon(icon);\n\t\t\t}\n\n\t\t\tthis.options.push(button);\n\n\t\t\treturn button;\n\t\t},\n\n\t\t/**\n\t\t * Add new menu to menu.\n\t\t *\n\t\t * @method addOption\n\t\t * @param {String} name Name of the option.\n\t\t * @param {String} icon Optional icon, image URL.\n\t\t * @return {DropdownMenu} The new menu created.\n\t\t */\n\t\taddMenu : function(name, icon) {\n\t\t\tvar menu = new DropdownMenu(this.panel);\n\t\t\tmenu.setText(name);\n\t\t\tmenu.setDirection(DropdownMenu.LEFT);\n\t\t\tmenu.showArrow();\n\t\t\tmenu.setAlignment(Text.LEFT);\n\t\t\tmenu.setMargin(25);\n\t\t\t\n\t\t\tif(icon !== undefined)\n\t\t\t{\n\t\t\t\tmenu.setIcon(icon);\n\t\t\t}\n\n\t\t\tthis.options.push(menu);\n\n\t\t\treturn menu;\n\t\t},\n\n\t\t/** \n\t\t * Update expanded state, position all options in this dropdown.\n\t\t * \n\t\t * @method setExpanded\n\t\t * @param {Boolean} expanded If true the menu will be expanded.\n\t\t */\n\t\tsetExpanded : function(expanded){\n\t\t\tthis.expanded = expanded;\n\n\t\t\tif(this.expanded) {\n\t\t\t\tthis.panel._elm.style.display = \"block\";\n\n\t\t\t\tif(this.direction === DropdownMenu.DOWN){\n\t\t\t\t\tthis.panel._elm.style.top = (this.position.y + this.size.y) + \"px\";\n\t\t\t\t\tthis.panel._elm.style.left = this.position.x + \"px\";\n\n\t\t\t\t\t//var out = DOMUtils.checkBorder(this.panel);\n\t\t\t\t\tvar out = geom.testAsis(this.panel);\n\n\t\t\t\t\tif(out.y !== 0)\t{\n\t\t\t\t\t\tthis.panel._elm.style.top = null;\n\t\t\t\t\t\tthis.panel._elm.style.bottom = (this.position.y + this.size.y) + \"px\";\n\t\t\t\t\t}\n\t\t\t\t\tif(out.x !== 0)\t{\n\t\t\t\t\t\tthis.panel._elm.style.left = (this.position.x - out.x) + \"px\"; \n\t\t\t\t\t}\n\t\t\t\t} else if(this.direction === DropdownMenu.UP){\n\t\t\t\t\tthis.panel._elm.style.bottom = (this.position.y + this.size.y) + \"px\";\n\t\t\t\t\tthis.panel._elm.style.left = this.position.x + \"px\";\n\n\t\t\t\t\t//var out = DOMUtils.checkBorder(this.panel);\n\t\t\t\t\tvar out = geom.testAsis(this.panel);\n\t\t\t\t\tif(out.y !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.panel._elm.style.bottom = null;\n\t\t\t\t\t\tthis.panel._elm.style.top = (this.position.y + this.size.y) + \"px\";\n\t\t\t\t\t}\n\t\t\t\t\tif(out.x !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.panel._elm.style.left = (this.position.x - out.x) + \"px\"; \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(this.direction === DropdownMenu.LEFT)\n\t\t\t\t{\n\t\t\t\t\tthis.panel._elm.style.top = this.position.y + \"px\";\n\t\t\t\t\tthis.panel._elm.style.left = (this.position.x + this.size.x) + \"px\";\n\n\t\t\t\t\t//var out = DOMUtils.checkBorder(this.panel);\n\t\t\t\t\tvar out = geom.testAsis(this.panel);\n\t\t\t\t\tif(out.x !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.panel._elm.style.left = (this.position.x - this.size.x) + \"px\"; \n\t\t\t\t\t}\n\t\t\t\t\tif(out.y !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.panel._elm.style.top = (this.position.y - out.y) + \"px\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(this.direction === DropdownMenu.RIGHT)\n\t\t\t\t{\n\t\t\t\t\tthis.panel._elm.style.top = this.position.y + \"px\";\n\t\t\t\t\tthis.panel._elm.style.left = (this.position.x - this.size.x) + \"px\";\n\n\t\t\t\t\t//var out = DOMUtils.checkBorder(this.panel);\n\t\t\t\t\tvar out = geom.testAsis(this.panel);\n\t\t\t\t\tif(out.x !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.panel._elm.style.left = (this.position.x + this.size.x) + \"px\";\n\t\t\t\t\t}\n\t\t\t\t\tif(out.y !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.panel._elm.style.top = (this.position.y - out.y) + \"px\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tthis.panel._elm.style.display = \"none\";\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Update all options in the menu.\n\t\t * \n\t\t * @method updateOptions\n\t\t */\n\t\tupdateOptions : function() {\n\t\t\tfor(var i = 0; i < this.options.length; i++) {\n\t\t\t\tthis.options[i].size.set(this.optionsSize.x, this.optionsSize.y);\n\t\t\t\tthis.options[i].position.set(0, this.optionsSize.y * i);\n\t\t\t\tthis.options[i].updateInterface();\n\t\t\t}\n\n\t\t\tthis.panel._elm.style.width = this.size.x + \"px\";\n\t\t\tthis.panel._elm.style.height = (this.optionsSize.y * this.options.length) + \"px\";\n\t\t},\n\n\t\tdestroy : function() {\n\t\t\tWidget.prototype.destroy.call(this);\n\n\t\t\tthis.parent.destroy();\n\t\t},\n\n\t\tupdateSize : function() {\n//\t\t\tText.prototype.updateSize.call(this);\n\n\t\t\tthis.updateOptions();\n\t\t},\n\n\n\t\t...TextMixin\n\n\t});\n\n\n\tDropdownMenu.DOWN = 0;\n\tDropdownMenu.UP = 1;\n\tDropdownMenu.LEFT = 2;\n\tDropdownMenu.RIGHT = 3;\n\n\n\n\treturn DropdownMenu;\n});\ndefine('skylark-widgets-actions/menus/ContextMenu',[\n\t\"skylark-langx-numerics/Vector2\",\n\t\"skylark-domx-geom\",\n\t\"skylark-widgets-base/Widget\",\n\t\"../actions\",\n\t\"./ButtonMenu\",\n\t\"./DropdownMenu\"\n],function(\n\tVector2,\n\tgeom,\n\n\tWidget,\n\tactions,\n\tButtonMenu,\n\tDropdownMenu\n){\n\t\"use strict\";\n\n\t/**\n\t * Context menu widget.\n\t * \n\t * @class ContextMenu\n\t * @extends {Widget}\n\t * @param {Widget} parent Parent widget.\n\t */\n\tvar ContextMenu = Widget.inherit({\n\n\t\t_construct : function (parent) {\t\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\n\n\t\t\tvar self = this;\n\n\t\t\tthis._elm.style.overflow = \"visible\";\n\t\t\tthis._elm.style.zIndex = \"300\";\n\t\t\tthis._elm.onmouseleave = function()\t{\n\t\t\t\tself.destroy();\n\t\t\t};\n\n\t\t\tthis.offset = new Vector2(20, 10);\n\t\t\t\n\t\t\t/**\n\t\t\t * Options in this menu.\n\t\t\t * \n\t\t\t * @attribute options\n\t\t\t * @type {Array}\n\t\t\t */\n\t\t\tthis.options = [];\n\t\t},\n\n\n\t\t/**\n\t\t * Set the text of this context menu.\n\t\t * \n\t\t * @method setText\n\t\t * @param {String} text\n\t\t */\n\t\tsetText : function(text) {\n\t\t\tthis.text.setText(text);\n\t\t},\n\n\t\t/**\n\t\t * Remove option from context menu.\n\t\t *\n\t\t * @method removeOption\n\t\t * @param {Number} index\n\t\t */\n\t\tremoveOption : function(index) {\n\t\t\tif(index >= 0 && index < this.options.length)\t{\n\t\t\t\tthis.options[index].destroy();\n\t\t\t\tthis.options.splice(index, 1);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add new option to context menu\n\t\t *\n\t\t * @method addOption\n\t\t * @param {String} name of the option\n\t\t * @param {Function} callback Callback function\n\t\t */\n\t\taddOption : function(name, callback) {\n\t\t\tvar button = new ButtonMenu(this);\n\t\t\tbutton._elm.style.zIndex = \"10000\";\n\t\t\tbutton.setText(name);\n\t\t\tbutton.setAlignment(Text.LEFT);\n\t\t\tbutton.position.x = 25;\n\n\t\t\tvar self = this;\n\t\t\tbutton.setOnClick(function(){\n\t\t\t\tcallback();\n\t\t\t\tself.destroy();\n\t\t\t});\n\n\t\t\tthis.options.push(button);\n\t\t},\n\n\t\t/**\n\t\t * Add new menu to context menu\n\t\t *\n\t\t * @method addOption\n\t\t * @param {String} name of the option.\n\t\t * @return {DropdownMenu} The new menu created.\n\t\t */\n\t\taddMenu : function(name) {\n\t\t\tvar menu = new DropdownMenu(this);\n\t\t\tmenu.setText(name);\n\t\t\tmenu.setDirection(DropdownMenu.LEFT);\n\t\t\tmenu.showArrow();\n\t\t\tmenu.setAlignment(Text.LEFT);\n\t\t\tmenu.setMargin(25);\n\n\t\t\tthis.options.push(menu);\n\n\t\t\treturn menu;\n\t\t},\n\n\t\t/**\n\t\t * Update all options in the menu.\n\t\t * \n\t\t * @method updateOptions\n\t\t */\n\t\tupdateOptions : function() {\n\t\t\tfor(var i = 0; i < this.options.length; i++)\n\t\t\t{\n\t\t\t\tthis.options[i].size.copy(this.size);\n\t\t\t\tthis.options[i].position.set(0, this.size.y * i);\n\t\t\t\tthis.options[i].updateInterface();\n\t\t\t}\n\t\t},\n\n\t\tupdateSize : function()\t{\n\t\t\tthis._elm.style.width = this.size.x + \"px\";\n\t\t\tthis._elm.style.height = (this.size.y * this.options.length) + \"px\";\n\n\t\t\tthis.updateOptions();\n\t\t},\n\n\t\tupdatePosition : function() {\n\t\t\tthis._elm.style.top = (this.position.y - this.offset.y) + \"px\";\n\t\t\tthis._elm.style.left = (this.position.x - this.offset.x) + \"px\";\n\n\t\t\t//Check if its inside window\n\t\t\t\n\t\t\t//var out = DOMUtils.checkBorder(this._elm);\n\t\t\tvar out = geom.testAxis(this._elm);\n\t\t\tif(out.x !== 0)\n\t\t\t{\n\t\t\t\tthis._elm.style.left = (this.position.x + this.offset.x - this.size.x) + \"px\"; \n\t\t\t}\n\t\t\tif(out.y !== 0)\n\t\t\t{\n\t\t\t\tthis._elm.style.top = (this.position.y - this.offset.y - out.y) + \"px\";\n\t\t\t}\n\n\t\t}\n\t});\n\n\treturn actions.menus.ContextMenu = ContextMenu;\n});\ndefine('skylark-widgets-actions/main',[\r\n\t\"./actions\",\r\n\t\"./buttons/Button\",\r\n\t\"./buttons/ButtonDrawer\",\r\n\t\"./buttons/ButtonImage\",\r\n\t\"./buttons/ButtonImageToggle\",\r\n\t\"./buttons/ButtonText\",\r\n\t\"./menus/ButtonMenu\",\r\n\t\"./menus/ContextMenu\",\r\n\t\"./menus/DropdownMenu\"\r\n],function(texts){\r\n\treturn actions;\r\n});\ndefine('skylark-widgets-actions', ['skylark-widgets-actions/main'], function (main) { return main; });\n\n"]}