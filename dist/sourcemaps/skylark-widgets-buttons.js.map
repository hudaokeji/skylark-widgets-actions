{"version":3,"sources":["skylark-widgets-buttons.js"],"names":["define","skylark","attach","Widget","buttons","Button","inherit","_construct","parent","prototype","call","this","_elm","style","cursor","preventDragEvents","setColor","baseColor","overColor","backgroundColor","onmouseenter","onmouseleave","setStyles","baseStyle","overStyle","i","Vector2","ImageMixin","_buildImage","icon","document","createElement","pointerEvents","position","top","left","width","height","appendChild","setImage","image","src","setImageScale","x","y","ButtonImage","Editor","theme","buttonOverColor","Panel","ButtonDrawer","skin","getSkin","zIndex","buttonColor","overflow","panel","element","barColor","items","itemsPerLine","itemsSize","itemsScale","expanded","setExpanded","self","clear","length","destroy","display","insertItem","setParent","push","addItem","callback","altText","button","setOnClick","updateInterface","undefined","setAltText","removeItem","index","splice","updatePanelSize","size","Math","floor","updateSize","set","updatePosition","updateItems","updateVisibility","visible","optionsSize","get","v","optionsPerLine","addOption","insertOption","updateOptions","removeOption","reomveItem","ButtonImageToggle","justifyContent","alignItems","selected","onclick","setSelected","TextMixin","ButtonText","color","textColor","_buildText","main"],"mappings":"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","file":"../skylark-widgets-buttons.js","sourcesContent":["define('skylark-widgets-buttons/buttons',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark) {\r\n\r\n\r\n\treturn skylark.attach(\"widgets.buttons\",{});\r\n\r\n});\r\n\r\n\ndefine('skylark-widgets-buttons/Button',[\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./buttons\"\t\r\n],function(Widget,buttons){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Base button class.\r\n\t * \r\n\t * @class Button\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar Button = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tthis._elm.style.cursor = \"pointer\";\r\n\r\n\t\t\tthis.preventDragEvents();\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set button color.\r\n\t\t * \r\n\t\t * When mouse is over the button uses the overColor, when the mouse gets outside of the button it uses the base color.\r\n\t\t * \r\n\t\t * @method setColor\r\n\t\t * @param {String} baseColor CSS color for the button background.\r\n\t\t * @param {String} overColor CSS color for the button when mouse is over it.\r\n\t\t */\r\n\t\tsetColor : function(baseColor, overColor){\r\n\t\t\tthis._elm.style.backgroundColor = baseColor;\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\t{\r\n\t\t\t\tthis.style.backgroundColor = overColor;\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function()\t{\r\n\t\t\t\tthis.style.backgroundColor = baseColor;\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set button styles, the style can be descriped in a object.\r\n\t\t *\r\n\t\t * Here is an exaple of a style object:\r\n\t\t * {\r\n\t\t * backgroundColor: \"#FF0000\",\r\n\t\t * color: \"#FFFFFF\"\r\n\t\t * }\r\n\t\t *\r\n\t\t * @method setColor\r\n\t\t * @param {Object} baseStyle Object with the style to be applied as base.\r\n\t\t * @param {Object} overStyle Object with the style to be applied when mouse is over.\r\n\t\t */\r\n\t\tsetStyles : function(baseStyle, overStyle)\t{\r\n\t\t\tfor(var i in baseStyle)\r\n\t\t\t{\r\n\t\t\t\tthis._elm.style[i] = baseStyle[i];\r\n\t\t\t}\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\t{\r\n\t\t\t\tfor(var i in overStyle)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.style[i] = overStyle[i];\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function()\t{\r\n\t\t\t\tfor(var i in baseStyle)\t{\r\n\t\t\t\t\tthis.style[i] = baseStyle[i];\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\treturn buttons.Button = Button;\r\n});\ndefine('skylark-widgets-base/mixins/ImageMixin',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"../Widget\"\r\n],function(\r\n\tVector2,\r\n\tWidget\r\n){\r\n\t\"use strict\";\r\n\r\n\tvar ImageMixin = {\r\n\t\t_buildImage : function (parent) {\r\n\t\t\t/**\r\n\t\t\t * Button icon.\r\n\t\t\t * \r\n\t\t\t * @attribute icon\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.icon = document.createElement(\"img\");\r\n\t\t\tthis.icon.style.pointerEvents = \"none\";\r\n\t\t\tthis.icon.style.position = \"absolute\";\r\n\t\t\tthis.icon.style.top = \"15%\";\r\n\t\t\tthis.icon.style.left = \"15%\";\r\n\t\t\tthis.icon.style.width = \"70%\";\r\n\t\t\tthis.icon.style.height = \"70%\";\r\n\t\t\tthis._elm.appendChild(this.icon);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set button drawer icon.\r\n\t\t *\r\n\t\t * @method setImage\r\n\t\t * @param {String} image Image URL.\r\n\t\t */\r\n\t\tsetImage : function(image) {\r\n\t\t\tthis.icon.src = image;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set icon scale, the icon will be centered.\r\n\t\t *\r\n\t\t * @method setImageScale\r\n\t\t */\r\n\t\tsetImageScale : function(x, y){\r\n\t\t\tthis.icon.style.top = ((1 - y) / 2 * 100) + \"%\";\r\n\t\t\tthis.icon.style.left = ((1 - x) / 2 * 100) + \"%\";\r\n\t\t\tthis.icon.style.width = (x * 100) + \"%\";\r\n\t\t\tthis.icon.style.height = (y * 100) + \"%\";\r\n\t\t}\r\n\r\n\t};\r\n\r\n\treturn ImageMixin;\r\n});\ndefine('skylark-widgets-buttons/ButtonImage',[\r\n\t\"skylark-widgets-base/mixins/ImageMixin\",\r\n\t\"./buttons\",\r\n\t\"./Button\"\r\n],function(ImageMixin,buttons,Button){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with a centered icon.\r\n\t *\r\n\t * @class ButtonImageToggle\r\n\t * @extends {Button}\r\n\t * @param {Element} parent Parent element.\r\n\t */\r\n\tvar ButtonImage = Button.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButton.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis._buildImage();\r\n\t\t\tthis.setColor(null, Editor.theme.buttonOverColor);\r\n\t\t},\r\n\r\n\t\t...ImageMixin\r\n\r\n\t});\r\n\r\n\treturn buttons.ButtonImage = ButtonImage;\r\n});\ndefine('skylark-widgets-buttons/ButtonDrawer',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"skylark-widgets-base/panels/Panel\",\r\n\t\"./buttons\",\r\n\t\"./ButtonImage\"\r\n],function(\r\n\tVector2,\r\n\tPanel,\r\n\tbuttons,\r\n\tButtonImage\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with text, inherits all methods available on the Text class.\r\n\t * \r\n\t * Used in menu bars, panels, etc.\r\n\t *\r\n\t * @class ButtonDrawer\r\n\t * @extends {ButtonImage}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar ButtonDrawer = ButtonImage.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonImage.prototype._construct.call(this, parent);\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.zIndex = \"200\";\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.buttonColor;\r\n\t\t\tthis._elm.style.overflow = \"visible\";\r\n\r\n\t\t\tthis.panel = new Panel(this);\r\n\t\t\tthis.panel.element.style.position = \"absolute\";\r\n\t\t\tthis.panel.element.style.overflow = \"visible\";\r\n\t\t\t//this.panel.element.style.backgroundColor = Editor.theme.barColor;\r\n\t\t\tthis.panel.element.style.backgroundColor = skin.barColor;\r\n\t\t\tthis.panel.element.style.zIndex = \"250\";\r\n\r\n\t\t\t/** \r\n\t\t\t * List of the items in this panel.\r\n\t\t\t *\r\n\t\t\t * @attribute items\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.items = [];\r\n\r\n\t\t\t/**\r\n\t\t\t * Number of maximum items per row\r\n\t\t\t *\r\n\t\t\t * @attribute itemsPerLine\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.itemsPerLine = 3;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Size of each option, also affects the size of the panel.\r\n\t\t\t *\r\n\t\t\t * @attribute itemsSize\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.itemsSize = new Vector2(40, 40);\r\n\r\n\t\t\t/**\r\n\t\t\t * Scale of the inner icon of the items created from the addItem() method.\r\n\t\t\t *\r\n\t\t\t * @attribute itemsScale\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.itemsScale = new Vector2(0.7, 0.7);\r\n\r\n\t\t\t/**\r\n\t\t\t * Indicates if the button drawer panel is visible.\r\n\t\t\t *\r\n\t\t\t * @attribute expanded\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.expanded = false;\r\n\t\t\tthis.setExpanded(false);\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonOverColor;\r\n\t\t\t\tself.element.style.backgroundColor = skin.buttonOverColor;\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis._elm.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\t\tself.element.style.backgroundColor = skin.buttonColor;\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\r\n\t\t\tthis.panel.element.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis.panel.element.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\t\t},\r\n\r\n\r\n\t\tclear : function(){\r\n\t\t\tfor(var i = 0; i < this.items.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.items[i].destroy();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.items = [];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Expand or close the button drawer panel.\r\n\t\t *\r\n\t\t * @method setExpanded\r\n\t\t * @param {Boolean} expanded\r\n\t\t */\r\n\t\tsetExpanded : function(expanded){\r\n\t\t\tthis.expanded = expanded;\r\n\t\t\tthis.panel.element.style.display = this.expanded ? \"block\" : \"none\";\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Insert new option from already created element.\r\n\t\t *\r\n\t\t * @method insertItem\r\n\t\t * @param {Widget} Widget of the option to be inserted in the drawer\r\n\t\t */\r\n\t\tinsertItem : function(element){\r\n\t\t\telement.setParent(this.panel);\r\n\t\t\tthis.items.push(element);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Add new option to the menu.\r\n\t\t * \r\n\t\t * @method addItem\r\n\t\t * @param {String} image\r\n\t\t * @param {Function} callback\r\n\t\t * @param {String} altText\r\n\t\t */\r\n\t\taddItem : function(image, callback, altText){\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tvar button = new ButtonImage(this.panel);\r\n\t\t\tbutton.setImage(image);\r\n\t\t\tbutton.setOnClick(function()\r\n\t\t\t{\r\n\t\t\t\tcallback();\r\n\t\t\t\tself.expanded = false;\r\n\t\t\t\tself.updateInterface();\r\n\t\t\t});\r\n\r\n\t\t\tif(altText !== undefined)\r\n\t\t\t{\r\n\t\t\t\tbutton.setAltText(altText);\r\n\t\t\t}\r\n\r\n\t\t\tthis.items.push(button);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove an option from the menu.\r\n\t\t *\r\n\t\t * @method removeItem\r\n\t\t * @param {Number} index\r\n\t\t */\r\n\t\tremoveItem : function(index) \t{\r\n\t\t\tif(index >= 0 && index < this.items.length)\r\n\t\t\t{\r\n\t\t\t\tthis.items[index].destroy();\r\n\t\t\t\tthis.items.splice(index, 1);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Updates drawer panel size based on the number of items available.\r\n\t\t * \r\n\t\t * @method updatePanelSize\r\n\t\t */\r\n\t\tupdatePanelSize : function()\t{\r\n\t\t\tvar itemsPerLine = (this.items.length < this.itemsPerLine) ? this.items.length : this.itemsPerLine;\r\n\r\n\t\t\tthis.panel.size.x = (this.itemsSize.x * itemsPerLine);\r\n\t\t\tthis.panel.size.y = (this.itemsSize.y * (Math.floor((this.items.length - 1) / itemsPerLine) + 1));\r\n\t\t\tthis.panel.updateSize();\r\n\r\n\t\t\tthis.panel.position.set(this.itemsSize.x, 0);\r\n\t\t\tthis.panel.updatePosition();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update drawer items position and size.\r\n\t\t *\r\n\t\t * Should be called after change in items displacement variables).\r\n\t\t *\r\n\t\t * @method updateItems\r\n\t\t */\r\n\t\tupdateItems : function()\t{\r\n\t\t\tthis.updatePanelSize();\r\n\r\n\t\t\tvar itemsPerLine = (this.items.length < this.itemsPerLine) ? this.items.length : this.itemsPerLine;\r\n\r\n\t\t\tfor(var i = 0; i < this.items.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.items[i].size.set(this.itemsSize.x, this.itemsSize.y);\r\n\t\t\t\tthis.items[i].position.x = this.itemsSize.x * (i % itemsPerLine);\r\n\t\t\t\tthis.items[i].position.y = this.itemsSize.y * Math.floor(i / itemsPerLine);\r\n\t\t\t\tthis.items[i].updateInterface();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateVisibility : function()\t{\r\n\t\t\tthis._elm.style.display = this.visible ? \"block\" : \"none\";\r\n\t\t},\r\n\r\n\r\n\t\toptionsSize : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this.itemsSize;\r\n\t\t\t},\r\n\r\n\t\t\tset : function(v) {\r\n\t\t\t\tthis.itemsSize = v\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\toptionsPerLine : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this.itemsPerLine;\r\n\t\t\t},\r\n\r\n\t\t\tset : function(v) {\r\n\t\t\t\tthis.itemsPerLine = v\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t\r\n\tButtonDrawer.prototype.addOption = ButtonDrawer.prototype.addItem;\r\n\tButtonDrawer.prototype.insertOption = ButtonDrawer.prototype.insertItem;\r\n\tButtonDrawer.prototype.updateOptions = ButtonDrawer.prototype.updateItems;\r\n\tButtonDrawer.prototype.removeOption = ButtonDrawer.prototype.reomveItem;\r\n\r\n\r\n\treturn buttons.ButtonDrawer = ButtonDrawer;\r\n});\ndefine('skylark-widgets-buttons/ButtonImageToggle',[\r\n\t\"./buttons\",\r\n\t\"./ButtonImage\"\r\n],function(buttons,ButtonImage){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * A image button that can be toggled.\r\n\t * \r\n\t * @class ButtonImageToggle\r\n\t * @extends {ButtonImage}\r\n\t * @param {Element} parent Parent element.\r\n\t */\r\n\tvar ButtonImageToggle = ButtonImage.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonImage.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\tvar skin = this.getSkin();\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.buttonColor;\r\n\r\n\t\t\tthis.selected = false;\r\n\r\n\t\t\t//Click event\r\n\t\t\tvar self = this;\r\n\t\t\tthis._elm.onclick = function()\r\n\t\t\t{\r\n\t\t\t\tself.selected = !self.selected;\r\n\t\t\t};\r\n\r\n\t\t\t//Mouse over and mouse out events\r\n\t\t\tthis._elm.onmouseenter = function() {\r\n\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonOverColor;\r\n\t\t\t\tself.element.style.backgroundColor = skin.buttonOverColor;\r\n\t\t\t};\r\n\r\n\t\t\tthis._elm.onmouseleave = function() {\r\n\t\t\t\tif(!self.selected) {\r\n\t\t\t\t\t//self.element.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\t\t\tself.element.style.backgroundColor = skin.buttonColor;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set the seleted state of the toggle button.\r\n\t\t * \r\n\t\t * @method setSelected\r\n\t\t * @param {Boolean} selected\r\n\t\t */\r\n\t\tsetSelected : function(selected) {\r\n\t\t\tthis.selected = selected;\r\n\t\t\tvar skin = this.getSkin();\r\n\t\t\t//this._elm.style.backgroundColor = this.selected ? Editor.theme.buttonOverColor : Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.backgroundColor = this.selected ? skin.buttonOverColor : skin.buttonColor;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set button callback function.\r\n\t\t *\r\n\t\t * @method setOnClick\r\n\t\t */\r\n\t\tsetOnClick : function(callback) {\r\n\t\t\tvar self = this;\r\n\t\t\tthis._elm.onclick = function() \t{\r\n\t\t\t\tself.selected = !self.selected;\r\n\t\t\t\tcallback();\t\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\treturn buttons.ButtonImageToggle = ButtonImageToggle;\r\n});\ndefine('skylark-widgets-buttons/ButtonText',[\r\n\t\"skylark-widgets-base/mixins/TextMixin\",\r\n\t\"./buttons\",\r\n\t\"./Button\",\r\n],function(TextMixin,buttons,Button){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with text, inherits all methods available on the Text class.\r\n\t * \r\n\t * Used in menu bars, panels, etc.\r\n\t *\r\n\t * @class ButtonText\r\n\t * @extends {Button, Text}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\tvar ButtonText = Button.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButton.prototype._construct.call(this, parent);\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t//Span\r\n\t\t\tthis.span = document.createElement(\"span\");\r\n\t\t\tthis.span.style.overflow = \"hidden\";\r\n\t\t\tthis._elm.appendChild(this.span);\r\n\r\n\t\t\t//Text\r\n\t\t\tthis.text = document.createTextNode(\"\");\r\n\t\t\tthis.span.appendChild(this.text);\r\n\r\n\r\n\t\t\t//this.setColor(Editor.theme.buttonColor, Editor.theme.buttonOverColor);\r\n\t\t\tthis.setColor(skin.buttonColor, skin.buttonOverColor);\r\n\t\t\tthis.allowWordBreak(false);\r\n\t\t\tthis.setVerticalAlignment(TextMixin.CENTER);\r\n\t\t\tthis.setAlignment(TextMixin.CENTER);\r\n\t\t\t*/\r\n\r\n\t\t\tthis._buildText();\r\n\r\n\t\t\t//this.setColor(Editor.theme.buttonColor, Editor.theme.buttonOverColor);\r\n\t\t\tthis.setColor(skin.buttonColor, skin.buttonOverColor);\r\n\r\n\t\t},\r\n\t\t...TextMixin\r\n\t});\r\n\t\r\n\r\n\treturn buttons.ButtonText = ButtonText;\r\n});\r\n\ndefine('skylark-widgets-buttons/main',[\r\n\t\"./buttons\",\r\n\t\"./Button\",\r\n\t\"./ButtonDrawer\",\r\n\t\"./ButtonImage\",\r\n\t\"./ButtonImageToggle\",\r\n\t\"./ButtonText\"\r\n],function(buttons){\r\n\treturn buttons;\r\n});\ndefine('skylark-widgets-buttons', ['skylark-widgets-buttons/main'], function (main) { return main; });\n\n"]}