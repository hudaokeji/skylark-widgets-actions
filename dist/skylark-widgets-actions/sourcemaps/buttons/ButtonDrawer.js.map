{"version":3,"sources":["buttons/ButtonDrawer.js"],"names":["define","Vector2","Element","ButtonImage","ButtonDrawer","inherit","_construct","parent","prototype","call","this","_elm","style","zIndex","backgroundColor","Editor","theme","buttonColor","overflow","panel","Widget","element","barColor","options","optionsPerLine","optionsSize","optionsScale","expanded","setExpanded","self","onmouseenter","buttonOverColor","onmouseleave","clear","i","length","destroy","display","insertOption","attachTo","push","addOption","image","callback","altText","button","setImage","setOnClick","updateInterface","undefined","setAltText","removeOption","index","splice","_updatePanelSize","size","x","y","Math","floor","updateSize","position","set","updatePosition","_updateOptions","updatePanelSize","_updateVisibility","visible","actions","buttons"],"mappings":"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","file":"../../buttons/ButtonDrawer.js","sourcesContent":["define([\r\n\t\"skylark-langx-numbers/Vector2\",\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./ButtonImage\"\r\n],function(\r\n\tVector2,\r\n\tElement,\r\n\tButtonImage\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Button with text, inherits all methods available on the Text class.\r\n\t * \r\n\t * Used in menu bars, panels, etc.\r\n\t *\r\n\t * @class ButtonDrawer\r\n\t * @extends {ButtonImage}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar ButtonDrawer = ButtonImage.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tButtonImage.prototype._construct.call(this, parent);\r\n\r\n\r\n\t\t\tthis._elm.style.zIndex = \"200\";\r\n\t\t\tthis._elm.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\tthis._elm.style.overflow = \"visible\";\r\n\r\n\t\t\tthis.panel = new Widget(this, \"div\");\r\n\t\t\tthis.panel.element.style.overflow = \"visible\";\r\n\t\t\tthis.panel.element.style.backgroundColor = Editor.theme.barColor;\r\n\t\t\tthis.panel.element.style.zIndex = \"250\";\r\n\r\n\t\t\t/** \r\n\t\t\t * List of the options in this panel.\r\n\t\t\t *\r\n\t\t\t * @attribute options\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.options = [];\r\n\r\n\t\t\t/**\r\n\t\t\t * Number of maximum options per row\r\n\t\t\t *\r\n\t\t\t * @attribute optionsPerLine\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.optionsPerLine = 3;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Size of each option, also affects the size of the panel.\r\n\t\t\t *\r\n\t\t\t * @attribute optionsSize\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.optionsSize = new Vector2(40, 40);\r\n\r\n\t\t\t/**\r\n\t\t\t * Scale of the inner icon of the options created from the addOption() method.\r\n\t\t\t *\r\n\t\t\t * @attribute optionsScale\r\n\t\t\t * @type {Vector2}\r\n\t\t\t */\r\n\t\t\tthis.optionsScale = new Vector2(0.7, 0.7);\r\n\r\n\t\t\t/**\r\n\t\t\t * Indicates if the button drawer panel is visible.\r\n\t\t\t *\r\n\t\t\t * @attribute expanded\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.expanded = false;\r\n\t\t\tthis.setExpanded(false);\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tthis._elm.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\tself.element.style.backgroundColor = Editor.theme.buttonOverColor;\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis._elm.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\tself.element.style.backgroundColor = Editor.theme.buttonColor;\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\r\n\t\t\tthis.panel.element.onmouseenter = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(true);\r\n\t\t\t};\r\n\t\t\tthis.panel.element.onmouseleave = function()\r\n\t\t\t{\r\n\t\t\t\tself.setExpanded(false);\r\n\t\t\t};\r\n\t\t},\r\n\r\n\r\n\t\tclear : function(){\r\n\t\t\tfor(var i = 0; i < this.options.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.options[i].destroy();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.options = [];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Expand or close the button drawer panel.\r\n\t\t *\r\n\t\t * @method setExpanded\r\n\t\t * @param {Boolean} expanded\r\n\t\t */\r\n\t\tsetExpanded : function(expanded){\r\n\t\t\tthis.expanded = expanded;\r\n\t\t\tthis.panel.element.style.display = this.expanded ? \"block\" : \"none\";\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Insert new option from already created element.\r\n\t\t *\r\n\t\t * @method insertOption\r\n\t\t * @param {Widget} Widget of the option to be inserted in the drawer\r\n\t\t */\r\n\t\tinsertOption : function(element){\r\n\t\t\telement.attachTo(this.panel);\r\n\t\t\tthis.options.push(element);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Add new option to the menu.\r\n\t\t * \r\n\t\t * @method addOption\r\n\t\t * @param {String} image\r\n\t\t * @param {Function} callback\r\n\t\t * @param {String} altText\r\n\t\t */\r\n\t\taddOption : function(image, callback, altText){\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tvar button = new ButtonImage(this.panel);\r\n\t\t\tbutton.setImage(image);\r\n\t\t\tbutton.setOnClick(function()\r\n\t\t\t{\r\n\t\t\t\tcallback();\r\n\t\t\t\tself.expanded = false;\r\n\t\t\t\tself.updateInterface();\r\n\t\t\t});\r\n\r\n\t\t\tif(altText !== undefined)\r\n\t\t\t{\r\n\t\t\t\tbutton.setAltText(altText);\r\n\t\t\t}\r\n\r\n\t\t\tthis.options.push(button);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove an option from the menu.\r\n\t\t *\r\n\t\t * @method removeOption\r\n\t\t * @param {Number} index\r\n\t\t */\r\n\t\tremoveOption : function(index) \t{\r\n\t\t\tif(index >= 0 && index < this.options.length)\r\n\t\t\t{\r\n\t\t\t\tthis.options[index].destroy();\r\n\t\t\t\tthis.options.splice(index, 1);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Updates drawer panel size based on the number of options available.\r\n\t\t * \r\n\t\t * @method updatePanelSize\r\n\t\t */\r\n\t\t_updatePanelSize : function()\t{\r\n\t\t\tvar optionsPerLine = (this.options.length < this.optionsPerLine) ? this.options.length : this.optionsPerLine;\r\n\r\n\t\t\tthis.panel.size.x = (this.optionsSize.x * optionsPerLine);\r\n\t\t\tthis.panel.size.y = (this.optionsSize.y * (Math.floor((this.options.length - 1) / optionsPerLine) + 1));\r\n\t\t\tthis.panel.updateSize();\r\n\r\n\t\t\tthis.panel.position.set(this.optionsSize.x, 0);\r\n\t\t\tthis.panel.updatePosition();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update drawer options position and size.\r\n\t\t *\r\n\t\t * Should be called after change in options displacement variables).\r\n\t\t *\r\n\t\t * @method updateOptions\r\n\t\t */\r\n\t\t_updateOptions : function()\t{\r\n\t\t\tthis.updatePanelSize();\r\n\r\n\t\t\tvar optionsPerLine = (this.options.length < this.optionsPerLine) ? this.options.length : this.optionsPerLine;\r\n\r\n\t\t\tfor(var i = 0; i < this.options.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.options[i].size.set(this.optionsSize.x, this.optionsSize.y);\r\n\t\t\t\tthis.options[i].position.x = this.optionsSize.x * (i % optionsPerLine);\r\n\t\t\t\tthis.options[i].position.y = this.optionsSize.y * Math.floor(i / optionsPerLine);\r\n\t\t\t\tthis.options[i].updateInterface();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_updateVisibility : function()\t{\r\n\t\t\tthis._elm.style.display = this.visible ? \"block\" : \"none\";\r\n\t\t}\r\n\t});\r\n\r\n\r\n\treturn actions.buttons.ButtonDrawer = ButtonDrawer;\r\n});"]}